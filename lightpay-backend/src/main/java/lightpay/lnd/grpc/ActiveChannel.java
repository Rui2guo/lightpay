// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

package lightpay.lnd.grpc;

/**
 * Protobuf type {@code lnrpc.ActiveChannel}
 */
public  final class ActiveChannel extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:lnrpc.ActiveChannel)
    ActiveChannelOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ActiveChannel.newBuilder() to construct.
  private ActiveChannel(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ActiveChannel() {
    active_ = false;
    remotePubkey_ = "";
    channelPoint_ = "";
    chanId_ = 0L;
    capacity_ = 0L;
    localBalance_ = 0L;
    remoteBalance_ = 0L;
    commitFee_ = 0L;
    commitWeight_ = 0L;
    feePerKw_ = 0L;
    unsettledBalance_ = 0L;
    totalSatoshisSent_ = 0L;
    totalSatoshisReceived_ = 0L;
    numUpdates_ = 0L;
    pendingHtlcs_ = java.util.Collections.emptyList();
    csvDelay_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ActiveChannel(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {

            active_ = input.readBool();
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            remotePubkey_ = s;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            channelPoint_ = s;
            break;
          }
          case 32: {

            chanId_ = input.readUInt64();
            break;
          }
          case 40: {

            capacity_ = input.readInt64();
            break;
          }
          case 48: {

            localBalance_ = input.readInt64();
            break;
          }
          case 56: {

            remoteBalance_ = input.readInt64();
            break;
          }
          case 64: {

            commitFee_ = input.readInt64();
            break;
          }
          case 72: {

            commitWeight_ = input.readInt64();
            break;
          }
          case 80: {

            feePerKw_ = input.readInt64();
            break;
          }
          case 88: {

            unsettledBalance_ = input.readInt64();
            break;
          }
          case 96: {

            totalSatoshisSent_ = input.readInt64();
            break;
          }
          case 104: {

            totalSatoshisReceived_ = input.readInt64();
            break;
          }
          case 112: {

            numUpdates_ = input.readUInt64();
            break;
          }
          case 122: {
            if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
              pendingHtlcs_ = new java.util.ArrayList<lightpay.lnd.grpc.HTLC>();
              mutable_bitField0_ |= 0x00004000;
            }
            pendingHtlcs_.add(
                input.readMessage(lightpay.lnd.grpc.HTLC.parser(), extensionRegistry));
            break;
          }
          case 128: {

            csvDelay_ = input.readUInt32();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
        pendingHtlcs_ = java.util.Collections.unmodifiableList(pendingHtlcs_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_ActiveChannel_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_ActiveChannel_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            lightpay.lnd.grpc.ActiveChannel.class, lightpay.lnd.grpc.ActiveChannel.Builder.class);
  }

  private int bitField0_;
  public static final int ACTIVE_FIELD_NUMBER = 1;
  private boolean active_;
  /**
   * <pre>
   *&#47; Whether this channel is active or not
   * </pre>
   *
   * <code>bool active = 1[json_name = "active"];</code>
   */
  public boolean getActive() {
    return active_;
  }

  public static final int REMOTE_PUBKEY_FIELD_NUMBER = 2;
  private volatile java.lang.Object remotePubkey_;
  /**
   * <pre>
   *&#47; The identity pubkey of the remote node
   * </pre>
   *
   * <code>string remote_pubkey = 2[json_name = "remote_pubkey"];</code>
   */
  public java.lang.String getRemotePubkey() {
    java.lang.Object ref = remotePubkey_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      remotePubkey_ = s;
      return s;
    }
  }
  /**
   * <pre>
   *&#47; The identity pubkey of the remote node
   * </pre>
   *
   * <code>string remote_pubkey = 2[json_name = "remote_pubkey"];</code>
   */
  public com.google.protobuf.ByteString
      getRemotePubkeyBytes() {
    java.lang.Object ref = remotePubkey_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      remotePubkey_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CHANNEL_POINT_FIELD_NUMBER = 3;
  private volatile java.lang.Object channelPoint_;
  /**
   * <pre>
   **
   *The outpoint (txid:index) of the funding transaction. With this value, Bob
   *will be able to generate a signature for Alice's version of the commitment
   *transaction.
   * </pre>
   *
   * <code>string channel_point = 3[json_name = "channel_point"];</code>
   */
  public java.lang.String getChannelPoint() {
    java.lang.Object ref = channelPoint_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      channelPoint_ = s;
      return s;
    }
  }
  /**
   * <pre>
   **
   *The outpoint (txid:index) of the funding transaction. With this value, Bob
   *will be able to generate a signature for Alice's version of the commitment
   *transaction.
   * </pre>
   *
   * <code>string channel_point = 3[json_name = "channel_point"];</code>
   */
  public com.google.protobuf.ByteString
      getChannelPointBytes() {
    java.lang.Object ref = channelPoint_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      channelPoint_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CHAN_ID_FIELD_NUMBER = 4;
  private long chanId_;
  /**
   * <pre>
   **
   *The unique channel ID for the channel. The first 3 bytes are the block
   *height, the next 3 the index within the block, and the last 2 bytes are the
   *output index for the channel.
   * </pre>
   *
   * <code>uint64 chan_id = 4[json_name = "chan_id"];</code>
   */
  public long getChanId() {
    return chanId_;
  }

  public static final int CAPACITY_FIELD_NUMBER = 5;
  private long capacity_;
  /**
   * <pre>
   *&#47; The total amount of funds held in this channel
   * </pre>
   *
   * <code>int64 capacity = 5[json_name = "capacity"];</code>
   */
  public long getCapacity() {
    return capacity_;
  }

  public static final int LOCAL_BALANCE_FIELD_NUMBER = 6;
  private long localBalance_;
  /**
   * <pre>
   *&#47; This node's current balance in this channel
   * </pre>
   *
   * <code>int64 local_balance = 6[json_name = "local_balance"];</code>
   */
  public long getLocalBalance() {
    return localBalance_;
  }

  public static final int REMOTE_BALANCE_FIELD_NUMBER = 7;
  private long remoteBalance_;
  /**
   * <pre>
   *&#47; The counterparty's current balance in this channel
   * </pre>
   *
   * <code>int64 remote_balance = 7[json_name = "remote_balance"];</code>
   */
  public long getRemoteBalance() {
    return remoteBalance_;
  }

  public static final int COMMIT_FEE_FIELD_NUMBER = 8;
  private long commitFee_;
  /**
   * <pre>
   **
   *The amount calculated to be paid in fees for the current set of commitment
   *transactions. The fee amount is persisted with the channel in order to
   *allow the fee amount to be removed and recalculated with each channel state
   *update, including updates that happen after a system restart.
   * </pre>
   *
   * <code>int64 commit_fee = 8[json_name = "commit_fee"];</code>
   */
  public long getCommitFee() {
    return commitFee_;
  }

  public static final int COMMIT_WEIGHT_FIELD_NUMBER = 9;
  private long commitWeight_;
  /**
   * <pre>
   *&#47; The weight of the commitment transaction
   * </pre>
   *
   * <code>int64 commit_weight = 9[json_name = "commit_weight"];</code>
   */
  public long getCommitWeight() {
    return commitWeight_;
  }

  public static final int FEE_PER_KW_FIELD_NUMBER = 10;
  private long feePerKw_;
  /**
   * <pre>
   **
   *The required number of satoshis per kilo-weight that the requester will pay
   *at all times, for both the funding transaction and commitment transaction.
   *This value can later be updated once the channel is open.
   * </pre>
   *
   * <code>int64 fee_per_kw = 10[json_name = "fee_per_kw"];</code>
   */
  public long getFeePerKw() {
    return feePerKw_;
  }

  public static final int UNSETTLED_BALANCE_FIELD_NUMBER = 11;
  private long unsettledBalance_;
  /**
   * <pre>
   *&#47; The unsettled balance in this channel
   * </pre>
   *
   * <code>int64 unsettled_balance = 11[json_name = "unsettled_balance"];</code>
   */
  public long getUnsettledBalance() {
    return unsettledBalance_;
  }

  public static final int TOTAL_SATOSHIS_SENT_FIELD_NUMBER = 12;
  private long totalSatoshisSent_;
  /**
   * <pre>
   **
   *The total number of satoshis we've sent within this channel.
   * </pre>
   *
   * <code>int64 total_satoshis_sent = 12[json_name = "total_satoshis_sent"];</code>
   */
  public long getTotalSatoshisSent() {
    return totalSatoshisSent_;
  }

  public static final int TOTAL_SATOSHIS_RECEIVED_FIELD_NUMBER = 13;
  private long totalSatoshisReceived_;
  /**
   * <pre>
   **
   *The total number of satoshis we've received within this channel.
   * </pre>
   *
   * <code>int64 total_satoshis_received = 13[json_name = "total_satoshis_received"];</code>
   */
  public long getTotalSatoshisReceived() {
    return totalSatoshisReceived_;
  }

  public static final int NUM_UPDATES_FIELD_NUMBER = 14;
  private long numUpdates_;
  /**
   * <pre>
   **
   *The total number of updates conducted within this channel.
   * </pre>
   *
   * <code>uint64 num_updates = 14[json_name = "num_updates"];</code>
   */
  public long getNumUpdates() {
    return numUpdates_;
  }

  public static final int PENDING_HTLCS_FIELD_NUMBER = 15;
  private java.util.List<lightpay.lnd.grpc.HTLC> pendingHtlcs_;
  /**
   * <pre>
   **
   *The list of active, uncleared HTLCs currently pending within the channel.
   * </pre>
   *
   * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
   */
  public java.util.List<lightpay.lnd.grpc.HTLC> getPendingHtlcsList() {
    return pendingHtlcs_;
  }
  /**
   * <pre>
   **
   *The list of active, uncleared HTLCs currently pending within the channel.
   * </pre>
   *
   * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
   */
  public java.util.List<? extends lightpay.lnd.grpc.HTLCOrBuilder> 
      getPendingHtlcsOrBuilderList() {
    return pendingHtlcs_;
  }
  /**
   * <pre>
   **
   *The list of active, uncleared HTLCs currently pending within the channel.
   * </pre>
   *
   * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
   */
  public int getPendingHtlcsCount() {
    return pendingHtlcs_.size();
  }
  /**
   * <pre>
   **
   *The list of active, uncleared HTLCs currently pending within the channel.
   * </pre>
   *
   * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
   */
  public lightpay.lnd.grpc.HTLC getPendingHtlcs(int index) {
    return pendingHtlcs_.get(index);
  }
  /**
   * <pre>
   **
   *The list of active, uncleared HTLCs currently pending within the channel.
   * </pre>
   *
   * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
   */
  public lightpay.lnd.grpc.HTLCOrBuilder getPendingHtlcsOrBuilder(
      int index) {
    return pendingHtlcs_.get(index);
  }

  public static final int CSV_DELAY_FIELD_NUMBER = 16;
  private int csvDelay_;
  /**
   * <pre>
   **
   *The CSV delay expressed in relative blocks. If the channel is force
   *closed, we'll need to wait for this many blocks before we can regain our
   *funds.
   * </pre>
   *
   * <code>uint32 csv_delay = 16[json_name = "csv_delay"];</code>
   */
  public int getCsvDelay() {
    return csvDelay_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (active_ != false) {
      output.writeBool(1, active_);
    }
    if (!getRemotePubkeyBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, remotePubkey_);
    }
    if (!getChannelPointBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, channelPoint_);
    }
    if (chanId_ != 0L) {
      output.writeUInt64(4, chanId_);
    }
    if (capacity_ != 0L) {
      output.writeInt64(5, capacity_);
    }
    if (localBalance_ != 0L) {
      output.writeInt64(6, localBalance_);
    }
    if (remoteBalance_ != 0L) {
      output.writeInt64(7, remoteBalance_);
    }
    if (commitFee_ != 0L) {
      output.writeInt64(8, commitFee_);
    }
    if (commitWeight_ != 0L) {
      output.writeInt64(9, commitWeight_);
    }
    if (feePerKw_ != 0L) {
      output.writeInt64(10, feePerKw_);
    }
    if (unsettledBalance_ != 0L) {
      output.writeInt64(11, unsettledBalance_);
    }
    if (totalSatoshisSent_ != 0L) {
      output.writeInt64(12, totalSatoshisSent_);
    }
    if (totalSatoshisReceived_ != 0L) {
      output.writeInt64(13, totalSatoshisReceived_);
    }
    if (numUpdates_ != 0L) {
      output.writeUInt64(14, numUpdates_);
    }
    for (int i = 0; i < pendingHtlcs_.size(); i++) {
      output.writeMessage(15, pendingHtlcs_.get(i));
    }
    if (csvDelay_ != 0) {
      output.writeUInt32(16, csvDelay_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (active_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, active_);
    }
    if (!getRemotePubkeyBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, remotePubkey_);
    }
    if (!getChannelPointBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, channelPoint_);
    }
    if (chanId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(4, chanId_);
    }
    if (capacity_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(5, capacity_);
    }
    if (localBalance_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(6, localBalance_);
    }
    if (remoteBalance_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(7, remoteBalance_);
    }
    if (commitFee_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(8, commitFee_);
    }
    if (commitWeight_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(9, commitWeight_);
    }
    if (feePerKw_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(10, feePerKw_);
    }
    if (unsettledBalance_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(11, unsettledBalance_);
    }
    if (totalSatoshisSent_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(12, totalSatoshisSent_);
    }
    if (totalSatoshisReceived_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(13, totalSatoshisReceived_);
    }
    if (numUpdates_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(14, numUpdates_);
    }
    for (int i = 0; i < pendingHtlcs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, pendingHtlcs_.get(i));
    }
    if (csvDelay_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(16, csvDelay_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof lightpay.lnd.grpc.ActiveChannel)) {
      return super.equals(obj);
    }
    lightpay.lnd.grpc.ActiveChannel other = (lightpay.lnd.grpc.ActiveChannel) obj;

    boolean result = true;
    result = result && (getActive()
        == other.getActive());
    result = result && getRemotePubkey()
        .equals(other.getRemotePubkey());
    result = result && getChannelPoint()
        .equals(other.getChannelPoint());
    result = result && (getChanId()
        == other.getChanId());
    result = result && (getCapacity()
        == other.getCapacity());
    result = result && (getLocalBalance()
        == other.getLocalBalance());
    result = result && (getRemoteBalance()
        == other.getRemoteBalance());
    result = result && (getCommitFee()
        == other.getCommitFee());
    result = result && (getCommitWeight()
        == other.getCommitWeight());
    result = result && (getFeePerKw()
        == other.getFeePerKw());
    result = result && (getUnsettledBalance()
        == other.getUnsettledBalance());
    result = result && (getTotalSatoshisSent()
        == other.getTotalSatoshisSent());
    result = result && (getTotalSatoshisReceived()
        == other.getTotalSatoshisReceived());
    result = result && (getNumUpdates()
        == other.getNumUpdates());
    result = result && getPendingHtlcsList()
        .equals(other.getPendingHtlcsList());
    result = result && (getCsvDelay()
        == other.getCsvDelay());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ACTIVE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getActive());
    hash = (37 * hash) + REMOTE_PUBKEY_FIELD_NUMBER;
    hash = (53 * hash) + getRemotePubkey().hashCode();
    hash = (37 * hash) + CHANNEL_POINT_FIELD_NUMBER;
    hash = (53 * hash) + getChannelPoint().hashCode();
    hash = (37 * hash) + CHAN_ID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getChanId());
    hash = (37 * hash) + CAPACITY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getCapacity());
    hash = (37 * hash) + LOCAL_BALANCE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getLocalBalance());
    hash = (37 * hash) + REMOTE_BALANCE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getRemoteBalance());
    hash = (37 * hash) + COMMIT_FEE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getCommitFee());
    hash = (37 * hash) + COMMIT_WEIGHT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getCommitWeight());
    hash = (37 * hash) + FEE_PER_KW_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getFeePerKw());
    hash = (37 * hash) + UNSETTLED_BALANCE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getUnsettledBalance());
    hash = (37 * hash) + TOTAL_SATOSHIS_SENT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTotalSatoshisSent());
    hash = (37 * hash) + TOTAL_SATOSHIS_RECEIVED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTotalSatoshisReceived());
    hash = (37 * hash) + NUM_UPDATES_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getNumUpdates());
    if (getPendingHtlcsCount() > 0) {
      hash = (37 * hash) + PENDING_HTLCS_FIELD_NUMBER;
      hash = (53 * hash) + getPendingHtlcsList().hashCode();
    }
    hash = (37 * hash) + CSV_DELAY_FIELD_NUMBER;
    hash = (53 * hash) + getCsvDelay();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static lightpay.lnd.grpc.ActiveChannel parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static lightpay.lnd.grpc.ActiveChannel parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static lightpay.lnd.grpc.ActiveChannel parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static lightpay.lnd.grpc.ActiveChannel parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static lightpay.lnd.grpc.ActiveChannel parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static lightpay.lnd.grpc.ActiveChannel parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static lightpay.lnd.grpc.ActiveChannel parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static lightpay.lnd.grpc.ActiveChannel parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static lightpay.lnd.grpc.ActiveChannel parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static lightpay.lnd.grpc.ActiveChannel parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static lightpay.lnd.grpc.ActiveChannel parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static lightpay.lnd.grpc.ActiveChannel parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(lightpay.lnd.grpc.ActiveChannel prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code lnrpc.ActiveChannel}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:lnrpc.ActiveChannel)
      lightpay.lnd.grpc.ActiveChannelOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_ActiveChannel_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_ActiveChannel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              lightpay.lnd.grpc.ActiveChannel.class, lightpay.lnd.grpc.ActiveChannel.Builder.class);
    }

    // Construct using lightpay.lnd.grpc.ActiveChannel.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getPendingHtlcsFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      active_ = false;

      remotePubkey_ = "";

      channelPoint_ = "";

      chanId_ = 0L;

      capacity_ = 0L;

      localBalance_ = 0L;

      remoteBalance_ = 0L;

      commitFee_ = 0L;

      commitWeight_ = 0L;

      feePerKw_ = 0L;

      unsettledBalance_ = 0L;

      totalSatoshisSent_ = 0L;

      totalSatoshisReceived_ = 0L;

      numUpdates_ = 0L;

      if (pendingHtlcsBuilder_ == null) {
        pendingHtlcs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
      } else {
        pendingHtlcsBuilder_.clear();
      }
      csvDelay_ = 0;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_ActiveChannel_descriptor;
    }

    public lightpay.lnd.grpc.ActiveChannel getDefaultInstanceForType() {
      return lightpay.lnd.grpc.ActiveChannel.getDefaultInstance();
    }

    public lightpay.lnd.grpc.ActiveChannel build() {
      lightpay.lnd.grpc.ActiveChannel result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public lightpay.lnd.grpc.ActiveChannel buildPartial() {
      lightpay.lnd.grpc.ActiveChannel result = new lightpay.lnd.grpc.ActiveChannel(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.active_ = active_;
      result.remotePubkey_ = remotePubkey_;
      result.channelPoint_ = channelPoint_;
      result.chanId_ = chanId_;
      result.capacity_ = capacity_;
      result.localBalance_ = localBalance_;
      result.remoteBalance_ = remoteBalance_;
      result.commitFee_ = commitFee_;
      result.commitWeight_ = commitWeight_;
      result.feePerKw_ = feePerKw_;
      result.unsettledBalance_ = unsettledBalance_;
      result.totalSatoshisSent_ = totalSatoshisSent_;
      result.totalSatoshisReceived_ = totalSatoshisReceived_;
      result.numUpdates_ = numUpdates_;
      if (pendingHtlcsBuilder_ == null) {
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          pendingHtlcs_ = java.util.Collections.unmodifiableList(pendingHtlcs_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.pendingHtlcs_ = pendingHtlcs_;
      } else {
        result.pendingHtlcs_ = pendingHtlcsBuilder_.build();
      }
      result.csvDelay_ = csvDelay_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof lightpay.lnd.grpc.ActiveChannel) {
        return mergeFrom((lightpay.lnd.grpc.ActiveChannel)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(lightpay.lnd.grpc.ActiveChannel other) {
      if (other == lightpay.lnd.grpc.ActiveChannel.getDefaultInstance()) return this;
      if (other.getActive() != false) {
        setActive(other.getActive());
      }
      if (!other.getRemotePubkey().isEmpty()) {
        remotePubkey_ = other.remotePubkey_;
        onChanged();
      }
      if (!other.getChannelPoint().isEmpty()) {
        channelPoint_ = other.channelPoint_;
        onChanged();
      }
      if (other.getChanId() != 0L) {
        setChanId(other.getChanId());
      }
      if (other.getCapacity() != 0L) {
        setCapacity(other.getCapacity());
      }
      if (other.getLocalBalance() != 0L) {
        setLocalBalance(other.getLocalBalance());
      }
      if (other.getRemoteBalance() != 0L) {
        setRemoteBalance(other.getRemoteBalance());
      }
      if (other.getCommitFee() != 0L) {
        setCommitFee(other.getCommitFee());
      }
      if (other.getCommitWeight() != 0L) {
        setCommitWeight(other.getCommitWeight());
      }
      if (other.getFeePerKw() != 0L) {
        setFeePerKw(other.getFeePerKw());
      }
      if (other.getUnsettledBalance() != 0L) {
        setUnsettledBalance(other.getUnsettledBalance());
      }
      if (other.getTotalSatoshisSent() != 0L) {
        setTotalSatoshisSent(other.getTotalSatoshisSent());
      }
      if (other.getTotalSatoshisReceived() != 0L) {
        setTotalSatoshisReceived(other.getTotalSatoshisReceived());
      }
      if (other.getNumUpdates() != 0L) {
        setNumUpdates(other.getNumUpdates());
      }
      if (pendingHtlcsBuilder_ == null) {
        if (!other.pendingHtlcs_.isEmpty()) {
          if (pendingHtlcs_.isEmpty()) {
            pendingHtlcs_ = other.pendingHtlcs_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensurePendingHtlcsIsMutable();
            pendingHtlcs_.addAll(other.pendingHtlcs_);
          }
          onChanged();
        }
      } else {
        if (!other.pendingHtlcs_.isEmpty()) {
          if (pendingHtlcsBuilder_.isEmpty()) {
            pendingHtlcsBuilder_.dispose();
            pendingHtlcsBuilder_ = null;
            pendingHtlcs_ = other.pendingHtlcs_;
            bitField0_ = (bitField0_ & ~0x00004000);
            pendingHtlcsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPendingHtlcsFieldBuilder() : null;
          } else {
            pendingHtlcsBuilder_.addAllMessages(other.pendingHtlcs_);
          }
        }
      }
      if (other.getCsvDelay() != 0) {
        setCsvDelay(other.getCsvDelay());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      lightpay.lnd.grpc.ActiveChannel parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (lightpay.lnd.grpc.ActiveChannel) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private boolean active_ ;
    /**
     * <pre>
     *&#47; Whether this channel is active or not
     * </pre>
     *
     * <code>bool active = 1[json_name = "active"];</code>
     */
    public boolean getActive() {
      return active_;
    }
    /**
     * <pre>
     *&#47; Whether this channel is active or not
     * </pre>
     *
     * <code>bool active = 1[json_name = "active"];</code>
     */
    public Builder setActive(boolean value) {
      
      active_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; Whether this channel is active or not
     * </pre>
     *
     * <code>bool active = 1[json_name = "active"];</code>
     */
    public Builder clearActive() {
      
      active_ = false;
      onChanged();
      return this;
    }

    private java.lang.Object remotePubkey_ = "";
    /**
     * <pre>
     *&#47; The identity pubkey of the remote node
     * </pre>
     *
     * <code>string remote_pubkey = 2[json_name = "remote_pubkey"];</code>
     */
    public java.lang.String getRemotePubkey() {
      java.lang.Object ref = remotePubkey_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        remotePubkey_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the remote node
     * </pre>
     *
     * <code>string remote_pubkey = 2[json_name = "remote_pubkey"];</code>
     */
    public com.google.protobuf.ByteString
        getRemotePubkeyBytes() {
      java.lang.Object ref = remotePubkey_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        remotePubkey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the remote node
     * </pre>
     *
     * <code>string remote_pubkey = 2[json_name = "remote_pubkey"];</code>
     */
    public Builder setRemotePubkey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      remotePubkey_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the remote node
     * </pre>
     *
     * <code>string remote_pubkey = 2[json_name = "remote_pubkey"];</code>
     */
    public Builder clearRemotePubkey() {
      
      remotePubkey_ = getDefaultInstance().getRemotePubkey();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the remote node
     * </pre>
     *
     * <code>string remote_pubkey = 2[json_name = "remote_pubkey"];</code>
     */
    public Builder setRemotePubkeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      remotePubkey_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object channelPoint_ = "";
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>string channel_point = 3[json_name = "channel_point"];</code>
     */
    public java.lang.String getChannelPoint() {
      java.lang.Object ref = channelPoint_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        channelPoint_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>string channel_point = 3[json_name = "channel_point"];</code>
     */
    public com.google.protobuf.ByteString
        getChannelPointBytes() {
      java.lang.Object ref = channelPoint_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        channelPoint_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>string channel_point = 3[json_name = "channel_point"];</code>
     */
    public Builder setChannelPoint(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      channelPoint_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>string channel_point = 3[json_name = "channel_point"];</code>
     */
    public Builder clearChannelPoint() {
      
      channelPoint_ = getDefaultInstance().getChannelPoint();
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>string channel_point = 3[json_name = "channel_point"];</code>
     */
    public Builder setChannelPointBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      channelPoint_ = value;
      onChanged();
      return this;
    }

    private long chanId_ ;
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>uint64 chan_id = 4[json_name = "chan_id"];</code>
     */
    public long getChanId() {
      return chanId_;
    }
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>uint64 chan_id = 4[json_name = "chan_id"];</code>
     */
    public Builder setChanId(long value) {
      
      chanId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>uint64 chan_id = 4[json_name = "chan_id"];</code>
     */
    public Builder clearChanId() {
      
      chanId_ = 0L;
      onChanged();
      return this;
    }

    private long capacity_ ;
    /**
     * <pre>
     *&#47; The total amount of funds held in this channel
     * </pre>
     *
     * <code>int64 capacity = 5[json_name = "capacity"];</code>
     */
    public long getCapacity() {
      return capacity_;
    }
    /**
     * <pre>
     *&#47; The total amount of funds held in this channel
     * </pre>
     *
     * <code>int64 capacity = 5[json_name = "capacity"];</code>
     */
    public Builder setCapacity(long value) {
      
      capacity_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The total amount of funds held in this channel
     * </pre>
     *
     * <code>int64 capacity = 5[json_name = "capacity"];</code>
     */
    public Builder clearCapacity() {
      
      capacity_ = 0L;
      onChanged();
      return this;
    }

    private long localBalance_ ;
    /**
     * <pre>
     *&#47; This node's current balance in this channel
     * </pre>
     *
     * <code>int64 local_balance = 6[json_name = "local_balance"];</code>
     */
    public long getLocalBalance() {
      return localBalance_;
    }
    /**
     * <pre>
     *&#47; This node's current balance in this channel
     * </pre>
     *
     * <code>int64 local_balance = 6[json_name = "local_balance"];</code>
     */
    public Builder setLocalBalance(long value) {
      
      localBalance_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; This node's current balance in this channel
     * </pre>
     *
     * <code>int64 local_balance = 6[json_name = "local_balance"];</code>
     */
    public Builder clearLocalBalance() {
      
      localBalance_ = 0L;
      onChanged();
      return this;
    }

    private long remoteBalance_ ;
    /**
     * <pre>
     *&#47; The counterparty's current balance in this channel
     * </pre>
     *
     * <code>int64 remote_balance = 7[json_name = "remote_balance"];</code>
     */
    public long getRemoteBalance() {
      return remoteBalance_;
    }
    /**
     * <pre>
     *&#47; The counterparty's current balance in this channel
     * </pre>
     *
     * <code>int64 remote_balance = 7[json_name = "remote_balance"];</code>
     */
    public Builder setRemoteBalance(long value) {
      
      remoteBalance_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The counterparty's current balance in this channel
     * </pre>
     *
     * <code>int64 remote_balance = 7[json_name = "remote_balance"];</code>
     */
    public Builder clearRemoteBalance() {
      
      remoteBalance_ = 0L;
      onChanged();
      return this;
    }

    private long commitFee_ ;
    /**
     * <pre>
     **
     *The amount calculated to be paid in fees for the current set of commitment
     *transactions. The fee amount is persisted with the channel in order to
     *allow the fee amount to be removed and recalculated with each channel state
     *update, including updates that happen after a system restart.
     * </pre>
     *
     * <code>int64 commit_fee = 8[json_name = "commit_fee"];</code>
     */
    public long getCommitFee() {
      return commitFee_;
    }
    /**
     * <pre>
     **
     *The amount calculated to be paid in fees for the current set of commitment
     *transactions. The fee amount is persisted with the channel in order to
     *allow the fee amount to be removed and recalculated with each channel state
     *update, including updates that happen after a system restart.
     * </pre>
     *
     * <code>int64 commit_fee = 8[json_name = "commit_fee"];</code>
     */
    public Builder setCommitFee(long value) {
      
      commitFee_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *The amount calculated to be paid in fees for the current set of commitment
     *transactions. The fee amount is persisted with the channel in order to
     *allow the fee amount to be removed and recalculated with each channel state
     *update, including updates that happen after a system restart.
     * </pre>
     *
     * <code>int64 commit_fee = 8[json_name = "commit_fee"];</code>
     */
    public Builder clearCommitFee() {
      
      commitFee_ = 0L;
      onChanged();
      return this;
    }

    private long commitWeight_ ;
    /**
     * <pre>
     *&#47; The weight of the commitment transaction
     * </pre>
     *
     * <code>int64 commit_weight = 9[json_name = "commit_weight"];</code>
     */
    public long getCommitWeight() {
      return commitWeight_;
    }
    /**
     * <pre>
     *&#47; The weight of the commitment transaction
     * </pre>
     *
     * <code>int64 commit_weight = 9[json_name = "commit_weight"];</code>
     */
    public Builder setCommitWeight(long value) {
      
      commitWeight_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The weight of the commitment transaction
     * </pre>
     *
     * <code>int64 commit_weight = 9[json_name = "commit_weight"];</code>
     */
    public Builder clearCommitWeight() {
      
      commitWeight_ = 0L;
      onChanged();
      return this;
    }

    private long feePerKw_ ;
    /**
     * <pre>
     **
     *The required number of satoshis per kilo-weight that the requester will pay
     *at all times, for both the funding transaction and commitment transaction.
     *This value can later be updated once the channel is open.
     * </pre>
     *
     * <code>int64 fee_per_kw = 10[json_name = "fee_per_kw"];</code>
     */
    public long getFeePerKw() {
      return feePerKw_;
    }
    /**
     * <pre>
     **
     *The required number of satoshis per kilo-weight that the requester will pay
     *at all times, for both the funding transaction and commitment transaction.
     *This value can later be updated once the channel is open.
     * </pre>
     *
     * <code>int64 fee_per_kw = 10[json_name = "fee_per_kw"];</code>
     */
    public Builder setFeePerKw(long value) {
      
      feePerKw_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *The required number of satoshis per kilo-weight that the requester will pay
     *at all times, for both the funding transaction and commitment transaction.
     *This value can later be updated once the channel is open.
     * </pre>
     *
     * <code>int64 fee_per_kw = 10[json_name = "fee_per_kw"];</code>
     */
    public Builder clearFeePerKw() {
      
      feePerKw_ = 0L;
      onChanged();
      return this;
    }

    private long unsettledBalance_ ;
    /**
     * <pre>
     *&#47; The unsettled balance in this channel
     * </pre>
     *
     * <code>int64 unsettled_balance = 11[json_name = "unsettled_balance"];</code>
     */
    public long getUnsettledBalance() {
      return unsettledBalance_;
    }
    /**
     * <pre>
     *&#47; The unsettled balance in this channel
     * </pre>
     *
     * <code>int64 unsettled_balance = 11[json_name = "unsettled_balance"];</code>
     */
    public Builder setUnsettledBalance(long value) {
      
      unsettledBalance_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The unsettled balance in this channel
     * </pre>
     *
     * <code>int64 unsettled_balance = 11[json_name = "unsettled_balance"];</code>
     */
    public Builder clearUnsettledBalance() {
      
      unsettledBalance_ = 0L;
      onChanged();
      return this;
    }

    private long totalSatoshisSent_ ;
    /**
     * <pre>
     **
     *The total number of satoshis we've sent within this channel.
     * </pre>
     *
     * <code>int64 total_satoshis_sent = 12[json_name = "total_satoshis_sent"];</code>
     */
    public long getTotalSatoshisSent() {
      return totalSatoshisSent_;
    }
    /**
     * <pre>
     **
     *The total number of satoshis we've sent within this channel.
     * </pre>
     *
     * <code>int64 total_satoshis_sent = 12[json_name = "total_satoshis_sent"];</code>
     */
    public Builder setTotalSatoshisSent(long value) {
      
      totalSatoshisSent_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *The total number of satoshis we've sent within this channel.
     * </pre>
     *
     * <code>int64 total_satoshis_sent = 12[json_name = "total_satoshis_sent"];</code>
     */
    public Builder clearTotalSatoshisSent() {
      
      totalSatoshisSent_ = 0L;
      onChanged();
      return this;
    }

    private long totalSatoshisReceived_ ;
    /**
     * <pre>
     **
     *The total number of satoshis we've received within this channel.
     * </pre>
     *
     * <code>int64 total_satoshis_received = 13[json_name = "total_satoshis_received"];</code>
     */
    public long getTotalSatoshisReceived() {
      return totalSatoshisReceived_;
    }
    /**
     * <pre>
     **
     *The total number of satoshis we've received within this channel.
     * </pre>
     *
     * <code>int64 total_satoshis_received = 13[json_name = "total_satoshis_received"];</code>
     */
    public Builder setTotalSatoshisReceived(long value) {
      
      totalSatoshisReceived_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *The total number of satoshis we've received within this channel.
     * </pre>
     *
     * <code>int64 total_satoshis_received = 13[json_name = "total_satoshis_received"];</code>
     */
    public Builder clearTotalSatoshisReceived() {
      
      totalSatoshisReceived_ = 0L;
      onChanged();
      return this;
    }

    private long numUpdates_ ;
    /**
     * <pre>
     **
     *The total number of updates conducted within this channel.
     * </pre>
     *
     * <code>uint64 num_updates = 14[json_name = "num_updates"];</code>
     */
    public long getNumUpdates() {
      return numUpdates_;
    }
    /**
     * <pre>
     **
     *The total number of updates conducted within this channel.
     * </pre>
     *
     * <code>uint64 num_updates = 14[json_name = "num_updates"];</code>
     */
    public Builder setNumUpdates(long value) {
      
      numUpdates_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *The total number of updates conducted within this channel.
     * </pre>
     *
     * <code>uint64 num_updates = 14[json_name = "num_updates"];</code>
     */
    public Builder clearNumUpdates() {
      
      numUpdates_ = 0L;
      onChanged();
      return this;
    }

    private java.util.List<lightpay.lnd.grpc.HTLC> pendingHtlcs_ =
      java.util.Collections.emptyList();
    private void ensurePendingHtlcsIsMutable() {
      if (!((bitField0_ & 0x00004000) == 0x00004000)) {
        pendingHtlcs_ = new java.util.ArrayList<lightpay.lnd.grpc.HTLC>(pendingHtlcs_);
        bitField0_ |= 0x00004000;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        lightpay.lnd.grpc.HTLC, lightpay.lnd.grpc.HTLC.Builder, lightpay.lnd.grpc.HTLCOrBuilder> pendingHtlcsBuilder_;

    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public java.util.List<lightpay.lnd.grpc.HTLC> getPendingHtlcsList() {
      if (pendingHtlcsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(pendingHtlcs_);
      } else {
        return pendingHtlcsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public int getPendingHtlcsCount() {
      if (pendingHtlcsBuilder_ == null) {
        return pendingHtlcs_.size();
      } else {
        return pendingHtlcsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public lightpay.lnd.grpc.HTLC getPendingHtlcs(int index) {
      if (pendingHtlcsBuilder_ == null) {
        return pendingHtlcs_.get(index);
      } else {
        return pendingHtlcsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public Builder setPendingHtlcs(
        int index, lightpay.lnd.grpc.HTLC value) {
      if (pendingHtlcsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePendingHtlcsIsMutable();
        pendingHtlcs_.set(index, value);
        onChanged();
      } else {
        pendingHtlcsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public Builder setPendingHtlcs(
        int index, lightpay.lnd.grpc.HTLC.Builder builderForValue) {
      if (pendingHtlcsBuilder_ == null) {
        ensurePendingHtlcsIsMutable();
        pendingHtlcs_.set(index, builderForValue.build());
        onChanged();
      } else {
        pendingHtlcsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public Builder addPendingHtlcs(lightpay.lnd.grpc.HTLC value) {
      if (pendingHtlcsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePendingHtlcsIsMutable();
        pendingHtlcs_.add(value);
        onChanged();
      } else {
        pendingHtlcsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public Builder addPendingHtlcs(
        int index, lightpay.lnd.grpc.HTLC value) {
      if (pendingHtlcsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePendingHtlcsIsMutable();
        pendingHtlcs_.add(index, value);
        onChanged();
      } else {
        pendingHtlcsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public Builder addPendingHtlcs(
        lightpay.lnd.grpc.HTLC.Builder builderForValue) {
      if (pendingHtlcsBuilder_ == null) {
        ensurePendingHtlcsIsMutable();
        pendingHtlcs_.add(builderForValue.build());
        onChanged();
      } else {
        pendingHtlcsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public Builder addPendingHtlcs(
        int index, lightpay.lnd.grpc.HTLC.Builder builderForValue) {
      if (pendingHtlcsBuilder_ == null) {
        ensurePendingHtlcsIsMutable();
        pendingHtlcs_.add(index, builderForValue.build());
        onChanged();
      } else {
        pendingHtlcsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public Builder addAllPendingHtlcs(
        java.lang.Iterable<? extends lightpay.lnd.grpc.HTLC> values) {
      if (pendingHtlcsBuilder_ == null) {
        ensurePendingHtlcsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, pendingHtlcs_);
        onChanged();
      } else {
        pendingHtlcsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public Builder clearPendingHtlcs() {
      if (pendingHtlcsBuilder_ == null) {
        pendingHtlcs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
      } else {
        pendingHtlcsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public Builder removePendingHtlcs(int index) {
      if (pendingHtlcsBuilder_ == null) {
        ensurePendingHtlcsIsMutable();
        pendingHtlcs_.remove(index);
        onChanged();
      } else {
        pendingHtlcsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public lightpay.lnd.grpc.HTLC.Builder getPendingHtlcsBuilder(
        int index) {
      return getPendingHtlcsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public lightpay.lnd.grpc.HTLCOrBuilder getPendingHtlcsOrBuilder(
        int index) {
      if (pendingHtlcsBuilder_ == null) {
        return pendingHtlcs_.get(index);  } else {
        return pendingHtlcsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public java.util.List<? extends lightpay.lnd.grpc.HTLCOrBuilder> 
         getPendingHtlcsOrBuilderList() {
      if (pendingHtlcsBuilder_ != null) {
        return pendingHtlcsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(pendingHtlcs_);
      }
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public lightpay.lnd.grpc.HTLC.Builder addPendingHtlcsBuilder() {
      return getPendingHtlcsFieldBuilder().addBuilder(
          lightpay.lnd.grpc.HTLC.getDefaultInstance());
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public lightpay.lnd.grpc.HTLC.Builder addPendingHtlcsBuilder(
        int index) {
      return getPendingHtlcsFieldBuilder().addBuilder(
          index, lightpay.lnd.grpc.HTLC.getDefaultInstance());
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
     */
    public java.util.List<lightpay.lnd.grpc.HTLC.Builder> 
         getPendingHtlcsBuilderList() {
      return getPendingHtlcsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        lightpay.lnd.grpc.HTLC, lightpay.lnd.grpc.HTLC.Builder, lightpay.lnd.grpc.HTLCOrBuilder> 
        getPendingHtlcsFieldBuilder() {
      if (pendingHtlcsBuilder_ == null) {
        pendingHtlcsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            lightpay.lnd.grpc.HTLC, lightpay.lnd.grpc.HTLC.Builder, lightpay.lnd.grpc.HTLCOrBuilder>(
                pendingHtlcs_,
                ((bitField0_ & 0x00004000) == 0x00004000),
                getParentForChildren(),
                isClean());
        pendingHtlcs_ = null;
      }
      return pendingHtlcsBuilder_;
    }

    private int csvDelay_ ;
    /**
     * <pre>
     **
     *The CSV delay expressed in relative blocks. If the channel is force
     *closed, we'll need to wait for this many blocks before we can regain our
     *funds.
     * </pre>
     *
     * <code>uint32 csv_delay = 16[json_name = "csv_delay"];</code>
     */
    public int getCsvDelay() {
      return csvDelay_;
    }
    /**
     * <pre>
     **
     *The CSV delay expressed in relative blocks. If the channel is force
     *closed, we'll need to wait for this many blocks before we can regain our
     *funds.
     * </pre>
     *
     * <code>uint32 csv_delay = 16[json_name = "csv_delay"];</code>
     */
    public Builder setCsvDelay(int value) {
      
      csvDelay_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     *The CSV delay expressed in relative blocks. If the channel is force
     *closed, we'll need to wait for this many blocks before we can regain our
     *funds.
     * </pre>
     *
     * <code>uint32 csv_delay = 16[json_name = "csv_delay"];</code>
     */
    public Builder clearCsvDelay() {
      
      csvDelay_ = 0;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:lnrpc.ActiveChannel)
  }

  // @@protoc_insertion_point(class_scope:lnrpc.ActiveChannel)
  private static final lightpay.lnd.grpc.ActiveChannel DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new lightpay.lnd.grpc.ActiveChannel();
  }

  public static lightpay.lnd.grpc.ActiveChannel getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ActiveChannel>
      PARSER = new com.google.protobuf.AbstractParser<ActiveChannel>() {
    public ActiveChannel parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ActiveChannel(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ActiveChannel> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ActiveChannel> getParserForType() {
    return PARSER;
  }

  public lightpay.lnd.grpc.ActiveChannel getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

