// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

package lightpay.lnd.grpc;

public interface ActiveChannelOrBuilder extends
    // @@protoc_insertion_point(interface_extends:lnrpc.ActiveChannel)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   *&#47; Whether this channel is active or not
   * </pre>
   *
   * <code>bool active = 1[json_name = "active"];</code>
   */
  boolean getActive();

  /**
   * <pre>
   *&#47; The identity pubkey of the remote node
   * </pre>
   *
   * <code>string remote_pubkey = 2[json_name = "remote_pubkey"];</code>
   */
  java.lang.String getRemotePubkey();
  /**
   * <pre>
   *&#47; The identity pubkey of the remote node
   * </pre>
   *
   * <code>string remote_pubkey = 2[json_name = "remote_pubkey"];</code>
   */
  com.google.protobuf.ByteString
      getRemotePubkeyBytes();

  /**
   * <pre>
   **
   *The outpoint (txid:index) of the funding transaction. With this value, Bob
   *will be able to generate a signature for Alice's version of the commitment
   *transaction.
   * </pre>
   *
   * <code>string channel_point = 3[json_name = "channel_point"];</code>
   */
  java.lang.String getChannelPoint();
  /**
   * <pre>
   **
   *The outpoint (txid:index) of the funding transaction. With this value, Bob
   *will be able to generate a signature for Alice's version of the commitment
   *transaction.
   * </pre>
   *
   * <code>string channel_point = 3[json_name = "channel_point"];</code>
   */
  com.google.protobuf.ByteString
      getChannelPointBytes();

  /**
   * <pre>
   **
   *The unique channel ID for the channel. The first 3 bytes are the block
   *height, the next 3 the index within the block, and the last 2 bytes are the
   *output index for the channel.
   * </pre>
   *
   * <code>uint64 chan_id = 4[json_name = "chan_id"];</code>
   */
  long getChanId();

  /**
   * <pre>
   *&#47; The total amount of funds held in this channel
   * </pre>
   *
   * <code>int64 capacity = 5[json_name = "capacity"];</code>
   */
  long getCapacity();

  /**
   * <pre>
   *&#47; This node's current balance in this channel
   * </pre>
   *
   * <code>int64 local_balance = 6[json_name = "local_balance"];</code>
   */
  long getLocalBalance();

  /**
   * <pre>
   *&#47; The counterparty's current balance in this channel
   * </pre>
   *
   * <code>int64 remote_balance = 7[json_name = "remote_balance"];</code>
   */
  long getRemoteBalance();

  /**
   * <pre>
   **
   *The amount calculated to be paid in fees for the current set of commitment
   *transactions. The fee amount is persisted with the channel in order to
   *allow the fee amount to be removed and recalculated with each channel state
   *update, including updates that happen after a system restart.
   * </pre>
   *
   * <code>int64 commit_fee = 8[json_name = "commit_fee"];</code>
   */
  long getCommitFee();

  /**
   * <pre>
   *&#47; The weight of the commitment transaction
   * </pre>
   *
   * <code>int64 commit_weight = 9[json_name = "commit_weight"];</code>
   */
  long getCommitWeight();

  /**
   * <pre>
   **
   *The required number of satoshis per kilo-weight that the requester will pay
   *at all times, for both the funding transaction and commitment transaction.
   *This value can later be updated once the channel is open.
   * </pre>
   *
   * <code>int64 fee_per_kw = 10[json_name = "fee_per_kw"];</code>
   */
  long getFeePerKw();

  /**
   * <pre>
   *&#47; The unsettled balance in this channel
   * </pre>
   *
   * <code>int64 unsettled_balance = 11[json_name = "unsettled_balance"];</code>
   */
  long getUnsettledBalance();

  /**
   * <pre>
   **
   *The total number of satoshis we've sent within this channel.
   * </pre>
   *
   * <code>int64 total_satoshis_sent = 12[json_name = "total_satoshis_sent"];</code>
   */
  long getTotalSatoshisSent();

  /**
   * <pre>
   **
   *The total number of satoshis we've received within this channel.
   * </pre>
   *
   * <code>int64 total_satoshis_received = 13[json_name = "total_satoshis_received"];</code>
   */
  long getTotalSatoshisReceived();

  /**
   * <pre>
   **
   *The total number of updates conducted within this channel.
   * </pre>
   *
   * <code>uint64 num_updates = 14[json_name = "num_updates"];</code>
   */
  long getNumUpdates();

  /**
   * <pre>
   **
   *The list of active, uncleared HTLCs currently pending within the channel.
   * </pre>
   *
   * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
   */
  java.util.List<lightpay.lnd.grpc.HTLC> 
      getPendingHtlcsList();
  /**
   * <pre>
   **
   *The list of active, uncleared HTLCs currently pending within the channel.
   * </pre>
   *
   * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
   */
  lightpay.lnd.grpc.HTLC getPendingHtlcs(int index);
  /**
   * <pre>
   **
   *The list of active, uncleared HTLCs currently pending within the channel.
   * </pre>
   *
   * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
   */
  int getPendingHtlcsCount();
  /**
   * <pre>
   **
   *The list of active, uncleared HTLCs currently pending within the channel.
   * </pre>
   *
   * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
   */
  java.util.List<? extends lightpay.lnd.grpc.HTLCOrBuilder> 
      getPendingHtlcsOrBuilderList();
  /**
   * <pre>
   **
   *The list of active, uncleared HTLCs currently pending within the channel.
   * </pre>
   *
   * <code>repeated .lnrpc.HTLC pending_htlcs = 15[json_name = "pending_htlcs"];</code>
   */
  lightpay.lnd.grpc.HTLCOrBuilder getPendingHtlcsOrBuilder(
      int index);

  /**
   * <pre>
   **
   *The CSV delay expressed in relative blocks. If the channel is force
   *closed, we'll need to wait for this many blocks before we can regain our
   *funds.
   * </pre>
   *
   * <code>uint32 csv_delay = 16[json_name = "csv_delay"];</code>
   */
  int getCsvDelay();
}
