// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

package lightpay.lnd.grpc;

/**
 * Protobuf type {@code lnrpc.CloseChannelRequest}
 */
public  final class CloseChannelRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:lnrpc.CloseChannelRequest)
    CloseChannelRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CloseChannelRequest.newBuilder() to construct.
  private CloseChannelRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CloseChannelRequest() {
    force_ = false;
    targetConf_ = 0;
    satPerByte_ = 0L;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CloseChannelRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            lightpay.lnd.grpc.ChannelPoint.Builder subBuilder = null;
            if (channelPoint_ != null) {
              subBuilder = channelPoint_.toBuilder();
            }
            channelPoint_ = input.readMessage(lightpay.lnd.grpc.ChannelPoint.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(channelPoint_);
              channelPoint_ = subBuilder.buildPartial();
            }

            break;
          }
          case 16: {

            force_ = input.readBool();
            break;
          }
          case 24: {

            targetConf_ = input.readInt32();
            break;
          }
          case 32: {

            satPerByte_ = input.readInt64();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_CloseChannelRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_CloseChannelRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            lightpay.lnd.grpc.CloseChannelRequest.class, lightpay.lnd.grpc.CloseChannelRequest.Builder.class);
  }

  public static final int CHANNEL_POINT_FIELD_NUMBER = 1;
  private lightpay.lnd.grpc.ChannelPoint channelPoint_;
  /**
   * <pre>
   **
   *The outpoint (txid:index) of the funding transaction. With this value, Bob
   *will be able to generate a signature for Alice's version of the commitment
   *transaction.
   * </pre>
   *
   * <code>.lnrpc.ChannelPoint channel_point = 1;</code>
   */
  public boolean hasChannelPoint() {
    return channelPoint_ != null;
  }
  /**
   * <pre>
   **
   *The outpoint (txid:index) of the funding transaction. With this value, Bob
   *will be able to generate a signature for Alice's version of the commitment
   *transaction.
   * </pre>
   *
   * <code>.lnrpc.ChannelPoint channel_point = 1;</code>
   */
  public lightpay.lnd.grpc.ChannelPoint getChannelPoint() {
    return channelPoint_ == null ? lightpay.lnd.grpc.ChannelPoint.getDefaultInstance() : channelPoint_;
  }
  /**
   * <pre>
   **
   *The outpoint (txid:index) of the funding transaction. With this value, Bob
   *will be able to generate a signature for Alice's version of the commitment
   *transaction.
   * </pre>
   *
   * <code>.lnrpc.ChannelPoint channel_point = 1;</code>
   */
  public lightpay.lnd.grpc.ChannelPointOrBuilder getChannelPointOrBuilder() {
    return getChannelPoint();
  }

  public static final int FORCE_FIELD_NUMBER = 2;
  private boolean force_;
  /**
   * <pre>
   *&#47; If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast.
   * </pre>
   *
   * <code>bool force = 2;</code>
   */
  public boolean getForce() {
    return force_;
  }

  public static final int TARGET_CONF_FIELD_NUMBER = 3;
  private int targetConf_;
  /**
   * <pre>
   *&#47; The target number of blocks that the closure transaction should be confirmed by.
   * </pre>
   *
   * <code>int32 target_conf = 3;</code>
   */
  public int getTargetConf() {
    return targetConf_;
  }

  public static final int SAT_PER_BYTE_FIELD_NUMBER = 4;
  private long satPerByte_;
  /**
   * <pre>
   *&#47; A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
   * </pre>
   *
   * <code>int64 sat_per_byte = 4;</code>
   */
  public long getSatPerByte() {
    return satPerByte_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (channelPoint_ != null) {
      output.writeMessage(1, getChannelPoint());
    }
    if (force_ != false) {
      output.writeBool(2, force_);
    }
    if (targetConf_ != 0) {
      output.writeInt32(3, targetConf_);
    }
    if (satPerByte_ != 0L) {
      output.writeInt64(4, satPerByte_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (channelPoint_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getChannelPoint());
    }
    if (force_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, force_);
    }
    if (targetConf_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, targetConf_);
    }
    if (satPerByte_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(4, satPerByte_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof lightpay.lnd.grpc.CloseChannelRequest)) {
      return super.equals(obj);
    }
    lightpay.lnd.grpc.CloseChannelRequest other = (lightpay.lnd.grpc.CloseChannelRequest) obj;

    boolean result = true;
    result = result && (hasChannelPoint() == other.hasChannelPoint());
    if (hasChannelPoint()) {
      result = result && getChannelPoint()
          .equals(other.getChannelPoint());
    }
    result = result && (getForce()
        == other.getForce());
    result = result && (getTargetConf()
        == other.getTargetConf());
    result = result && (getSatPerByte()
        == other.getSatPerByte());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasChannelPoint()) {
      hash = (37 * hash) + CHANNEL_POINT_FIELD_NUMBER;
      hash = (53 * hash) + getChannelPoint().hashCode();
    }
    hash = (37 * hash) + FORCE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getForce());
    hash = (37 * hash) + TARGET_CONF_FIELD_NUMBER;
    hash = (53 * hash) + getTargetConf();
    hash = (37 * hash) + SAT_PER_BYTE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getSatPerByte());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static lightpay.lnd.grpc.CloseChannelRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static lightpay.lnd.grpc.CloseChannelRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static lightpay.lnd.grpc.CloseChannelRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static lightpay.lnd.grpc.CloseChannelRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static lightpay.lnd.grpc.CloseChannelRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static lightpay.lnd.grpc.CloseChannelRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static lightpay.lnd.grpc.CloseChannelRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static lightpay.lnd.grpc.CloseChannelRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static lightpay.lnd.grpc.CloseChannelRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static lightpay.lnd.grpc.CloseChannelRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static lightpay.lnd.grpc.CloseChannelRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static lightpay.lnd.grpc.CloseChannelRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(lightpay.lnd.grpc.CloseChannelRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code lnrpc.CloseChannelRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:lnrpc.CloseChannelRequest)
      lightpay.lnd.grpc.CloseChannelRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_CloseChannelRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_CloseChannelRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              lightpay.lnd.grpc.CloseChannelRequest.class, lightpay.lnd.grpc.CloseChannelRequest.Builder.class);
    }

    // Construct using lightpay.lnd.grpc.CloseChannelRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (channelPointBuilder_ == null) {
        channelPoint_ = null;
      } else {
        channelPoint_ = null;
        channelPointBuilder_ = null;
      }
      force_ = false;

      targetConf_ = 0;

      satPerByte_ = 0L;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_CloseChannelRequest_descriptor;
    }

    public lightpay.lnd.grpc.CloseChannelRequest getDefaultInstanceForType() {
      return lightpay.lnd.grpc.CloseChannelRequest.getDefaultInstance();
    }

    public lightpay.lnd.grpc.CloseChannelRequest build() {
      lightpay.lnd.grpc.CloseChannelRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public lightpay.lnd.grpc.CloseChannelRequest buildPartial() {
      lightpay.lnd.grpc.CloseChannelRequest result = new lightpay.lnd.grpc.CloseChannelRequest(this);
      if (channelPointBuilder_ == null) {
        result.channelPoint_ = channelPoint_;
      } else {
        result.channelPoint_ = channelPointBuilder_.build();
      }
      result.force_ = force_;
      result.targetConf_ = targetConf_;
      result.satPerByte_ = satPerByte_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof lightpay.lnd.grpc.CloseChannelRequest) {
        return mergeFrom((lightpay.lnd.grpc.CloseChannelRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(lightpay.lnd.grpc.CloseChannelRequest other) {
      if (other == lightpay.lnd.grpc.CloseChannelRequest.getDefaultInstance()) return this;
      if (other.hasChannelPoint()) {
        mergeChannelPoint(other.getChannelPoint());
      }
      if (other.getForce() != false) {
        setForce(other.getForce());
      }
      if (other.getTargetConf() != 0) {
        setTargetConf(other.getTargetConf());
      }
      if (other.getSatPerByte() != 0L) {
        setSatPerByte(other.getSatPerByte());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      lightpay.lnd.grpc.CloseChannelRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (lightpay.lnd.grpc.CloseChannelRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private lightpay.lnd.grpc.ChannelPoint channelPoint_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        lightpay.lnd.grpc.ChannelPoint, lightpay.lnd.grpc.ChannelPoint.Builder, lightpay.lnd.grpc.ChannelPointOrBuilder> channelPointBuilder_;
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint channel_point = 1;</code>
     */
    public boolean hasChannelPoint() {
      return channelPointBuilder_ != null || channelPoint_ != null;
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint channel_point = 1;</code>
     */
    public lightpay.lnd.grpc.ChannelPoint getChannelPoint() {
      if (channelPointBuilder_ == null) {
        return channelPoint_ == null ? lightpay.lnd.grpc.ChannelPoint.getDefaultInstance() : channelPoint_;
      } else {
        return channelPointBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint channel_point = 1;</code>
     */
    public Builder setChannelPoint(lightpay.lnd.grpc.ChannelPoint value) {
      if (channelPointBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        channelPoint_ = value;
        onChanged();
      } else {
        channelPointBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint channel_point = 1;</code>
     */
    public Builder setChannelPoint(
        lightpay.lnd.grpc.ChannelPoint.Builder builderForValue) {
      if (channelPointBuilder_ == null) {
        channelPoint_ = builderForValue.build();
        onChanged();
      } else {
        channelPointBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint channel_point = 1;</code>
     */
    public Builder mergeChannelPoint(lightpay.lnd.grpc.ChannelPoint value) {
      if (channelPointBuilder_ == null) {
        if (channelPoint_ != null) {
          channelPoint_ =
            lightpay.lnd.grpc.ChannelPoint.newBuilder(channelPoint_).mergeFrom(value).buildPartial();
        } else {
          channelPoint_ = value;
        }
        onChanged();
      } else {
        channelPointBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint channel_point = 1;</code>
     */
    public Builder clearChannelPoint() {
      if (channelPointBuilder_ == null) {
        channelPoint_ = null;
        onChanged();
      } else {
        channelPoint_ = null;
        channelPointBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint channel_point = 1;</code>
     */
    public lightpay.lnd.grpc.ChannelPoint.Builder getChannelPointBuilder() {
      
      onChanged();
      return getChannelPointFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint channel_point = 1;</code>
     */
    public lightpay.lnd.grpc.ChannelPointOrBuilder getChannelPointOrBuilder() {
      if (channelPointBuilder_ != null) {
        return channelPointBuilder_.getMessageOrBuilder();
      } else {
        return channelPoint_ == null ?
            lightpay.lnd.grpc.ChannelPoint.getDefaultInstance() : channelPoint_;
      }
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint channel_point = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        lightpay.lnd.grpc.ChannelPoint, lightpay.lnd.grpc.ChannelPoint.Builder, lightpay.lnd.grpc.ChannelPointOrBuilder> 
        getChannelPointFieldBuilder() {
      if (channelPointBuilder_ == null) {
        channelPointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            lightpay.lnd.grpc.ChannelPoint, lightpay.lnd.grpc.ChannelPoint.Builder, lightpay.lnd.grpc.ChannelPointOrBuilder>(
                getChannelPoint(),
                getParentForChildren(),
                isClean());
        channelPoint_ = null;
      }
      return channelPointBuilder_;
    }

    private boolean force_ ;
    /**
     * <pre>
     *&#47; If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast.
     * </pre>
     *
     * <code>bool force = 2;</code>
     */
    public boolean getForce() {
      return force_;
    }
    /**
     * <pre>
     *&#47; If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast.
     * </pre>
     *
     * <code>bool force = 2;</code>
     */
    public Builder setForce(boolean value) {
      
      force_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast.
     * </pre>
     *
     * <code>bool force = 2;</code>
     */
    public Builder clearForce() {
      
      force_ = false;
      onChanged();
      return this;
    }

    private int targetConf_ ;
    /**
     * <pre>
     *&#47; The target number of blocks that the closure transaction should be confirmed by.
     * </pre>
     *
     * <code>int32 target_conf = 3;</code>
     */
    public int getTargetConf() {
      return targetConf_;
    }
    /**
     * <pre>
     *&#47; The target number of blocks that the closure transaction should be confirmed by.
     * </pre>
     *
     * <code>int32 target_conf = 3;</code>
     */
    public Builder setTargetConf(int value) {
      
      targetConf_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The target number of blocks that the closure transaction should be confirmed by.
     * </pre>
     *
     * <code>int32 target_conf = 3;</code>
     */
    public Builder clearTargetConf() {
      
      targetConf_ = 0;
      onChanged();
      return this;
    }

    private long satPerByte_ ;
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
     * </pre>
     *
     * <code>int64 sat_per_byte = 4;</code>
     */
    public long getSatPerByte() {
      return satPerByte_;
    }
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
     * </pre>
     *
     * <code>int64 sat_per_byte = 4;</code>
     */
    public Builder setSatPerByte(long value) {
      
      satPerByte_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
     * </pre>
     *
     * <code>int64 sat_per_byte = 4;</code>
     */
    public Builder clearSatPerByte() {
      
      satPerByte_ = 0L;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:lnrpc.CloseChannelRequest)
  }

  // @@protoc_insertion_point(class_scope:lnrpc.CloseChannelRequest)
  private static final lightpay.lnd.grpc.CloseChannelRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new lightpay.lnd.grpc.CloseChannelRequest();
  }

  public static lightpay.lnd.grpc.CloseChannelRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CloseChannelRequest>
      PARSER = new com.google.protobuf.AbstractParser<CloseChannelRequest>() {
    public CloseChannelRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CloseChannelRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CloseChannelRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CloseChannelRequest> getParserForType() {
    return PARSER;
  }

  public lightpay.lnd.grpc.CloseChannelRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

