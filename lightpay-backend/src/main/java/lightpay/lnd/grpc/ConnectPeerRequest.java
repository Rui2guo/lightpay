// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

package lightpay.lnd.grpc;

/**
 * Protobuf type {@code lnrpc.ConnectPeerRequest}
 */
public  final class ConnectPeerRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:lnrpc.ConnectPeerRequest)
    ConnectPeerRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ConnectPeerRequest.newBuilder() to construct.
  private ConnectPeerRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ConnectPeerRequest() {
    perm_ = false;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ConnectPeerRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            lightpay.lnd.grpc.LightningAddress.Builder subBuilder = null;
            if (addr_ != null) {
              subBuilder = addr_.toBuilder();
            }
            addr_ = input.readMessage(lightpay.lnd.grpc.LightningAddress.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(addr_);
              addr_ = subBuilder.buildPartial();
            }

            break;
          }
          case 16: {

            perm_ = input.readBool();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_ConnectPeerRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_ConnectPeerRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            lightpay.lnd.grpc.ConnectPeerRequest.class, lightpay.lnd.grpc.ConnectPeerRequest.Builder.class);
  }

  public static final int ADDR_FIELD_NUMBER = 1;
  private lightpay.lnd.grpc.LightningAddress addr_;
  /**
   * <pre>
   *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
   * </pre>
   *
   * <code>.lnrpc.LightningAddress addr = 1;</code>
   */
  public boolean hasAddr() {
    return addr_ != null;
  }
  /**
   * <pre>
   *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
   * </pre>
   *
   * <code>.lnrpc.LightningAddress addr = 1;</code>
   */
  public lightpay.lnd.grpc.LightningAddress getAddr() {
    return addr_ == null ? lightpay.lnd.grpc.LightningAddress.getDefaultInstance() : addr_;
  }
  /**
   * <pre>
   *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
   * </pre>
   *
   * <code>.lnrpc.LightningAddress addr = 1;</code>
   */
  public lightpay.lnd.grpc.LightningAddressOrBuilder getAddrOrBuilder() {
    return getAddr();
  }

  public static final int PERM_FIELD_NUMBER = 2;
  private boolean perm_;
  /**
   * <pre>
   ** If set, the daemon will attempt to persistently connect to the target
   * peer.  Otherwise, the call will be synchronous. 
   * </pre>
   *
   * <code>bool perm = 2;</code>
   */
  public boolean getPerm() {
    return perm_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (addr_ != null) {
      output.writeMessage(1, getAddr());
    }
    if (perm_ != false) {
      output.writeBool(2, perm_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (addr_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getAddr());
    }
    if (perm_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, perm_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof lightpay.lnd.grpc.ConnectPeerRequest)) {
      return super.equals(obj);
    }
    lightpay.lnd.grpc.ConnectPeerRequest other = (lightpay.lnd.grpc.ConnectPeerRequest) obj;

    boolean result = true;
    result = result && (hasAddr() == other.hasAddr());
    if (hasAddr()) {
      result = result && getAddr()
          .equals(other.getAddr());
    }
    result = result && (getPerm()
        == other.getPerm());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasAddr()) {
      hash = (37 * hash) + ADDR_FIELD_NUMBER;
      hash = (53 * hash) + getAddr().hashCode();
    }
    hash = (37 * hash) + PERM_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getPerm());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static lightpay.lnd.grpc.ConnectPeerRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static lightpay.lnd.grpc.ConnectPeerRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static lightpay.lnd.grpc.ConnectPeerRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static lightpay.lnd.grpc.ConnectPeerRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static lightpay.lnd.grpc.ConnectPeerRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static lightpay.lnd.grpc.ConnectPeerRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static lightpay.lnd.grpc.ConnectPeerRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static lightpay.lnd.grpc.ConnectPeerRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static lightpay.lnd.grpc.ConnectPeerRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static lightpay.lnd.grpc.ConnectPeerRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static lightpay.lnd.grpc.ConnectPeerRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static lightpay.lnd.grpc.ConnectPeerRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(lightpay.lnd.grpc.ConnectPeerRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code lnrpc.ConnectPeerRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:lnrpc.ConnectPeerRequest)
      lightpay.lnd.grpc.ConnectPeerRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_ConnectPeerRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_ConnectPeerRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              lightpay.lnd.grpc.ConnectPeerRequest.class, lightpay.lnd.grpc.ConnectPeerRequest.Builder.class);
    }

    // Construct using lightpay.lnd.grpc.ConnectPeerRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (addrBuilder_ == null) {
        addr_ = null;
      } else {
        addr_ = null;
        addrBuilder_ = null;
      }
      perm_ = false;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_ConnectPeerRequest_descriptor;
    }

    public lightpay.lnd.grpc.ConnectPeerRequest getDefaultInstanceForType() {
      return lightpay.lnd.grpc.ConnectPeerRequest.getDefaultInstance();
    }

    public lightpay.lnd.grpc.ConnectPeerRequest build() {
      lightpay.lnd.grpc.ConnectPeerRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public lightpay.lnd.grpc.ConnectPeerRequest buildPartial() {
      lightpay.lnd.grpc.ConnectPeerRequest result = new lightpay.lnd.grpc.ConnectPeerRequest(this);
      if (addrBuilder_ == null) {
        result.addr_ = addr_;
      } else {
        result.addr_ = addrBuilder_.build();
      }
      result.perm_ = perm_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof lightpay.lnd.grpc.ConnectPeerRequest) {
        return mergeFrom((lightpay.lnd.grpc.ConnectPeerRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(lightpay.lnd.grpc.ConnectPeerRequest other) {
      if (other == lightpay.lnd.grpc.ConnectPeerRequest.getDefaultInstance()) return this;
      if (other.hasAddr()) {
        mergeAddr(other.getAddr());
      }
      if (other.getPerm() != false) {
        setPerm(other.getPerm());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      lightpay.lnd.grpc.ConnectPeerRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (lightpay.lnd.grpc.ConnectPeerRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private lightpay.lnd.grpc.LightningAddress addr_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        lightpay.lnd.grpc.LightningAddress, lightpay.lnd.grpc.LightningAddress.Builder, lightpay.lnd.grpc.LightningAddressOrBuilder> addrBuilder_;
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>.lnrpc.LightningAddress addr = 1;</code>
     */
    public boolean hasAddr() {
      return addrBuilder_ != null || addr_ != null;
    }
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>.lnrpc.LightningAddress addr = 1;</code>
     */
    public lightpay.lnd.grpc.LightningAddress getAddr() {
      if (addrBuilder_ == null) {
        return addr_ == null ? lightpay.lnd.grpc.LightningAddress.getDefaultInstance() : addr_;
      } else {
        return addrBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>.lnrpc.LightningAddress addr = 1;</code>
     */
    public Builder setAddr(lightpay.lnd.grpc.LightningAddress value) {
      if (addrBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        addr_ = value;
        onChanged();
      } else {
        addrBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>.lnrpc.LightningAddress addr = 1;</code>
     */
    public Builder setAddr(
        lightpay.lnd.grpc.LightningAddress.Builder builderForValue) {
      if (addrBuilder_ == null) {
        addr_ = builderForValue.build();
        onChanged();
      } else {
        addrBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>.lnrpc.LightningAddress addr = 1;</code>
     */
    public Builder mergeAddr(lightpay.lnd.grpc.LightningAddress value) {
      if (addrBuilder_ == null) {
        if (addr_ != null) {
          addr_ =
            lightpay.lnd.grpc.LightningAddress.newBuilder(addr_).mergeFrom(value).buildPartial();
        } else {
          addr_ = value;
        }
        onChanged();
      } else {
        addrBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>.lnrpc.LightningAddress addr = 1;</code>
     */
    public Builder clearAddr() {
      if (addrBuilder_ == null) {
        addr_ = null;
        onChanged();
      } else {
        addr_ = null;
        addrBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>.lnrpc.LightningAddress addr = 1;</code>
     */
    public lightpay.lnd.grpc.LightningAddress.Builder getAddrBuilder() {
      
      onChanged();
      return getAddrFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>.lnrpc.LightningAddress addr = 1;</code>
     */
    public lightpay.lnd.grpc.LightningAddressOrBuilder getAddrOrBuilder() {
      if (addrBuilder_ != null) {
        return addrBuilder_.getMessageOrBuilder();
      } else {
        return addr_ == null ?
            lightpay.lnd.grpc.LightningAddress.getDefaultInstance() : addr_;
      }
    }
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>.lnrpc.LightningAddress addr = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        lightpay.lnd.grpc.LightningAddress, lightpay.lnd.grpc.LightningAddress.Builder, lightpay.lnd.grpc.LightningAddressOrBuilder> 
        getAddrFieldBuilder() {
      if (addrBuilder_ == null) {
        addrBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            lightpay.lnd.grpc.LightningAddress, lightpay.lnd.grpc.LightningAddress.Builder, lightpay.lnd.grpc.LightningAddressOrBuilder>(
                getAddr(),
                getParentForChildren(),
                isClean());
        addr_ = null;
      }
      return addrBuilder_;
    }

    private boolean perm_ ;
    /**
     * <pre>
     ** If set, the daemon will attempt to persistently connect to the target
     * peer.  Otherwise, the call will be synchronous. 
     * </pre>
     *
     * <code>bool perm = 2;</code>
     */
    public boolean getPerm() {
      return perm_;
    }
    /**
     * <pre>
     ** If set, the daemon will attempt to persistently connect to the target
     * peer.  Otherwise, the call will be synchronous. 
     * </pre>
     *
     * <code>bool perm = 2;</code>
     */
    public Builder setPerm(boolean value) {
      
      perm_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     ** If set, the daemon will attempt to persistently connect to the target
     * peer.  Otherwise, the call will be synchronous. 
     * </pre>
     *
     * <code>bool perm = 2;</code>
     */
    public Builder clearPerm() {
      
      perm_ = false;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:lnrpc.ConnectPeerRequest)
  }

  // @@protoc_insertion_point(class_scope:lnrpc.ConnectPeerRequest)
  private static final lightpay.lnd.grpc.ConnectPeerRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new lightpay.lnd.grpc.ConnectPeerRequest();
  }

  public static lightpay.lnd.grpc.ConnectPeerRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ConnectPeerRequest>
      PARSER = new com.google.protobuf.AbstractParser<ConnectPeerRequest>() {
    public ConnectPeerRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ConnectPeerRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ConnectPeerRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ConnectPeerRequest> getParserForType() {
    return PARSER;
  }

  public lightpay.lnd.grpc.ConnectPeerRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

