// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

package lightpay.lnd.grpc;

public interface InvoiceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:lnrpc.Invoice)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   **
   *An optional memo to attach along with the invoice. Used for record keeping
   *purposes for the invoice's creator, and will also be set in the description
   *field of the encoded payment request if the description_hash field is not
   *being used.
   * </pre>
   *
   * <code>string memo = 1[json_name = "memo"];</code>
   */
  java.lang.String getMemo();
  /**
   * <pre>
   **
   *An optional memo to attach along with the invoice. Used for record keeping
   *purposes for the invoice's creator, and will also be set in the description
   *field of the encoded payment request if the description_hash field is not
   *being used.
   * </pre>
   *
   * <code>string memo = 1[json_name = "memo"];</code>
   */
  com.google.protobuf.ByteString
      getMemoBytes();

  /**
   * <pre>
   *&#47; An optional cryptographic receipt of payment
   * </pre>
   *
   * <code>bytes receipt = 2[json_name = "receipt"];</code>
   */
  com.google.protobuf.ByteString getReceipt();

  /**
   * <pre>
   **
   *The hex-encoded preimage (32 byte) which will allow settling an incoming
   *HTLC payable to this preimage
   * </pre>
   *
   * <code>bytes r_preimage = 3[json_name = "r_preimage"];</code>
   */
  com.google.protobuf.ByteString getRPreimage();

  /**
   * <pre>
   *&#47; The hash of the preimage
   * </pre>
   *
   * <code>bytes r_hash = 4[json_name = "r_hash"];</code>
   */
  com.google.protobuf.ByteString getRHash();

  /**
   * <pre>
   *&#47; The value of this invoice in satoshis
   * </pre>
   *
   * <code>int64 value = 5[json_name = "value"];</code>
   */
  long getValue();

  /**
   * <pre>
   *&#47; Whether this invoice has been fulfilled
   * </pre>
   *
   * <code>bool settled = 6[json_name = "settled"];</code>
   */
  boolean getSettled();

  /**
   * <pre>
   *&#47; When this invoice was created
   * </pre>
   *
   * <code>int64 creation_date = 7[json_name = "creation_date"];</code>
   */
  long getCreationDate();

  /**
   * <pre>
   *&#47; When this invoice was settled
   * </pre>
   *
   * <code>int64 settle_date = 8[json_name = "settle_date"];</code>
   */
  long getSettleDate();

  /**
   * <pre>
   **
   *A bare-bones invoice for a payment within the Lightning Network.  With the
   *details of the invoice, the sender has all the data necessary to send a
   *payment to the recipient.
   * </pre>
   *
   * <code>string payment_request = 9[json_name = "payment_request"];</code>
   */
  java.lang.String getPaymentRequest();
  /**
   * <pre>
   **
   *A bare-bones invoice for a payment within the Lightning Network.  With the
   *details of the invoice, the sender has all the data necessary to send a
   *payment to the recipient.
   * </pre>
   *
   * <code>string payment_request = 9[json_name = "payment_request"];</code>
   */
  com.google.protobuf.ByteString
      getPaymentRequestBytes();

  /**
   * <pre>
   **
   *Hash (SHA-256) of a description of the payment. Used if the description of
   *payment (memo) is too long to naturally fit within the description field
   *of an encoded payment request.
   * </pre>
   *
   * <code>bytes description_hash = 10[json_name = "description_hash"];</code>
   */
  com.google.protobuf.ByteString getDescriptionHash();

  /**
   * <pre>
   *&#47; Payment request expiry time in seconds. Default is 3600 (1 hour).
   * </pre>
   *
   * <code>int64 expiry = 11[json_name = "expiry"];</code>
   */
  long getExpiry();

  /**
   * <pre>
   *&#47; Fallback on-chain address.
   * </pre>
   *
   * <code>string fallback_addr = 12[json_name = "fallback_addr"];</code>
   */
  java.lang.String getFallbackAddr();
  /**
   * <pre>
   *&#47; Fallback on-chain address.
   * </pre>
   *
   * <code>string fallback_addr = 12[json_name = "fallback_addr"];</code>
   */
  com.google.protobuf.ByteString
      getFallbackAddrBytes();

  /**
   * <pre>
   *&#47; Delta to use for the time-lock of the CLTV extended to the final hop.
   * </pre>
   *
   * <code>uint64 cltv_expiry = 13[json_name = "cltv_expiry"];</code>
   */
  long getCltvExpiry();
}
