// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

package lightpay.lnd.grpc;

public interface NodeInfoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:lnrpc.NodeInfo)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   **
   *An individual vertex/node within the channel graph. A node is
   *connected to other nodes by one or more channel edges emanating from it. As
   *the graph is directed, a node will also have an incoming edge attached to
   *it for each outgoing edge.
   * </pre>
   *
   * <code>.lnrpc.LightningNode node = 1[json_name = "node"];</code>
   */
  boolean hasNode();
  /**
   * <pre>
   **
   *An individual vertex/node within the channel graph. A node is
   *connected to other nodes by one or more channel edges emanating from it. As
   *the graph is directed, a node will also have an incoming edge attached to
   *it for each outgoing edge.
   * </pre>
   *
   * <code>.lnrpc.LightningNode node = 1[json_name = "node"];</code>
   */
  lightpay.lnd.grpc.LightningNode getNode();
  /**
   * <pre>
   **
   *An individual vertex/node within the channel graph. A node is
   *connected to other nodes by one or more channel edges emanating from it. As
   *the graph is directed, a node will also have an incoming edge attached to
   *it for each outgoing edge.
   * </pre>
   *
   * <code>.lnrpc.LightningNode node = 1[json_name = "node"];</code>
   */
  lightpay.lnd.grpc.LightningNodeOrBuilder getNodeOrBuilder();

  /**
   * <code>uint32 num_channels = 2[json_name = "num_channels"];</code>
   */
  int getNumChannels();

  /**
   * <code>int64 total_capacity = 3[json_name = "total_capacity"];</code>
   */
  long getTotalCapacity();
}
