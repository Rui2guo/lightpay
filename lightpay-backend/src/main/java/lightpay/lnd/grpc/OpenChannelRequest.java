// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

package lightpay.lnd.grpc;

/**
 * Protobuf type {@code lnrpc.OpenChannelRequest}
 */
public  final class OpenChannelRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:lnrpc.OpenChannelRequest)
    OpenChannelRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use OpenChannelRequest.newBuilder() to construct.
  private OpenChannelRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private OpenChannelRequest() {
    nodePubkey_ = com.google.protobuf.ByteString.EMPTY;
    nodePubkeyString_ = "";
    localFundingAmount_ = 0L;
    pushSat_ = 0L;
    targetConf_ = 0;
    satPerByte_ = 0L;
    private_ = false;
    minHtlcMsat_ = 0L;
    remoteCsvDelay_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private OpenChannelRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 18: {

            nodePubkey_ = input.readBytes();
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            nodePubkeyString_ = s;
            break;
          }
          case 32: {

            localFundingAmount_ = input.readInt64();
            break;
          }
          case 40: {

            pushSat_ = input.readInt64();
            break;
          }
          case 48: {

            targetConf_ = input.readInt32();
            break;
          }
          case 56: {

            satPerByte_ = input.readInt64();
            break;
          }
          case 64: {

            private_ = input.readBool();
            break;
          }
          case 72: {

            minHtlcMsat_ = input.readInt64();
            break;
          }
          case 80: {

            remoteCsvDelay_ = input.readUInt32();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_OpenChannelRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_OpenChannelRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            lightpay.lnd.grpc.OpenChannelRequest.class, lightpay.lnd.grpc.OpenChannelRequest.Builder.class);
  }

  public static final int NODE_PUBKEY_FIELD_NUMBER = 2;
  private com.google.protobuf.ByteString nodePubkey_;
  /**
   * <pre>
   *&#47; The pubkey of the node to open a channel with
   * </pre>
   *
   * <code>bytes node_pubkey = 2[json_name = "node_pubkey"];</code>
   */
  public com.google.protobuf.ByteString getNodePubkey() {
    return nodePubkey_;
  }

  public static final int NODE_PUBKEY_STRING_FIELD_NUMBER = 3;
  private volatile java.lang.Object nodePubkeyString_;
  /**
   * <pre>
   *&#47; The hex encoded pubkey of the node to open a channel with
   * </pre>
   *
   * <code>string node_pubkey_string = 3[json_name = "node_pubkey_string"];</code>
   */
  public java.lang.String getNodePubkeyString() {
    java.lang.Object ref = nodePubkeyString_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      nodePubkeyString_ = s;
      return s;
    }
  }
  /**
   * <pre>
   *&#47; The hex encoded pubkey of the node to open a channel with
   * </pre>
   *
   * <code>string node_pubkey_string = 3[json_name = "node_pubkey_string"];</code>
   */
  public com.google.protobuf.ByteString
      getNodePubkeyStringBytes() {
    java.lang.Object ref = nodePubkeyString_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      nodePubkeyString_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int LOCAL_FUNDING_AMOUNT_FIELD_NUMBER = 4;
  private long localFundingAmount_;
  /**
   * <pre>
   *&#47; The number of satoshis the wallet should commit to the channel
   * </pre>
   *
   * <code>int64 local_funding_amount = 4[json_name = "local_funding_amount"];</code>
   */
  public long getLocalFundingAmount() {
    return localFundingAmount_;
  }

  public static final int PUSH_SAT_FIELD_NUMBER = 5;
  private long pushSat_;
  /**
   * <pre>
   *&#47; The number of satoshis to push to the remote side as part of the initial commitment state
   * </pre>
   *
   * <code>int64 push_sat = 5[json_name = "push_sat"];</code>
   */
  public long getPushSat() {
    return pushSat_;
  }

  public static final int TARGET_CONF_FIELD_NUMBER = 6;
  private int targetConf_;
  /**
   * <pre>
   *&#47; The target number of blocks that the funding transaction should be confirmed by.
   * </pre>
   *
   * <code>int32 target_conf = 6;</code>
   */
  public int getTargetConf() {
    return targetConf_;
  }

  public static final int SAT_PER_BYTE_FIELD_NUMBER = 7;
  private long satPerByte_;
  /**
   * <pre>
   *&#47; A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
   * </pre>
   *
   * <code>int64 sat_per_byte = 7;</code>
   */
  public long getSatPerByte() {
    return satPerByte_;
  }

  public static final int PRIVATE_FIELD_NUMBER = 8;
  private boolean private_;
  /**
   * <pre>
   *&#47; Whether this channel should be private, not announced to the greater network.
   * </pre>
   *
   * <code>bool private = 8[json_name = "private"];</code>
   */
  public boolean getPrivate() {
    return private_;
  }

  public static final int MIN_HTLC_MSAT_FIELD_NUMBER = 9;
  private long minHtlcMsat_;
  /**
   * <pre>
   *&#47; The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
   * </pre>
   *
   * <code>int64 min_htlc_msat = 9[json_name = "min_htlc_msat"];</code>
   */
  public long getMinHtlcMsat() {
    return minHtlcMsat_;
  }

  public static final int REMOTE_CSV_DELAY_FIELD_NUMBER = 10;
  private int remoteCsvDelay_;
  /**
   * <pre>
   *&#47; The delay we require on the remote's commitment transaction. If this is not set, it will be scaled automatically with the channel size.
   * </pre>
   *
   * <code>uint32 remote_csv_delay = 10[json_name = "remote_csv_delay"];</code>
   */
  public int getRemoteCsvDelay() {
    return remoteCsvDelay_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!nodePubkey_.isEmpty()) {
      output.writeBytes(2, nodePubkey_);
    }
    if (!getNodePubkeyStringBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, nodePubkeyString_);
    }
    if (localFundingAmount_ != 0L) {
      output.writeInt64(4, localFundingAmount_);
    }
    if (pushSat_ != 0L) {
      output.writeInt64(5, pushSat_);
    }
    if (targetConf_ != 0) {
      output.writeInt32(6, targetConf_);
    }
    if (satPerByte_ != 0L) {
      output.writeInt64(7, satPerByte_);
    }
    if (private_ != false) {
      output.writeBool(8, private_);
    }
    if (minHtlcMsat_ != 0L) {
      output.writeInt64(9, minHtlcMsat_);
    }
    if (remoteCsvDelay_ != 0) {
      output.writeUInt32(10, remoteCsvDelay_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!nodePubkey_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(2, nodePubkey_);
    }
    if (!getNodePubkeyStringBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, nodePubkeyString_);
    }
    if (localFundingAmount_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(4, localFundingAmount_);
    }
    if (pushSat_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(5, pushSat_);
    }
    if (targetConf_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(6, targetConf_);
    }
    if (satPerByte_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(7, satPerByte_);
    }
    if (private_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, private_);
    }
    if (minHtlcMsat_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(9, minHtlcMsat_);
    }
    if (remoteCsvDelay_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(10, remoteCsvDelay_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof lightpay.lnd.grpc.OpenChannelRequest)) {
      return super.equals(obj);
    }
    lightpay.lnd.grpc.OpenChannelRequest other = (lightpay.lnd.grpc.OpenChannelRequest) obj;

    boolean result = true;
    result = result && getNodePubkey()
        .equals(other.getNodePubkey());
    result = result && getNodePubkeyString()
        .equals(other.getNodePubkeyString());
    result = result && (getLocalFundingAmount()
        == other.getLocalFundingAmount());
    result = result && (getPushSat()
        == other.getPushSat());
    result = result && (getTargetConf()
        == other.getTargetConf());
    result = result && (getSatPerByte()
        == other.getSatPerByte());
    result = result && (getPrivate()
        == other.getPrivate());
    result = result && (getMinHtlcMsat()
        == other.getMinHtlcMsat());
    result = result && (getRemoteCsvDelay()
        == other.getRemoteCsvDelay());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NODE_PUBKEY_FIELD_NUMBER;
    hash = (53 * hash) + getNodePubkey().hashCode();
    hash = (37 * hash) + NODE_PUBKEY_STRING_FIELD_NUMBER;
    hash = (53 * hash) + getNodePubkeyString().hashCode();
    hash = (37 * hash) + LOCAL_FUNDING_AMOUNT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getLocalFundingAmount());
    hash = (37 * hash) + PUSH_SAT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getPushSat());
    hash = (37 * hash) + TARGET_CONF_FIELD_NUMBER;
    hash = (53 * hash) + getTargetConf();
    hash = (37 * hash) + SAT_PER_BYTE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getSatPerByte());
    hash = (37 * hash) + PRIVATE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getPrivate());
    hash = (37 * hash) + MIN_HTLC_MSAT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getMinHtlcMsat());
    hash = (37 * hash) + REMOTE_CSV_DELAY_FIELD_NUMBER;
    hash = (53 * hash) + getRemoteCsvDelay();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static lightpay.lnd.grpc.OpenChannelRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static lightpay.lnd.grpc.OpenChannelRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static lightpay.lnd.grpc.OpenChannelRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static lightpay.lnd.grpc.OpenChannelRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static lightpay.lnd.grpc.OpenChannelRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static lightpay.lnd.grpc.OpenChannelRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static lightpay.lnd.grpc.OpenChannelRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static lightpay.lnd.grpc.OpenChannelRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static lightpay.lnd.grpc.OpenChannelRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static lightpay.lnd.grpc.OpenChannelRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static lightpay.lnd.grpc.OpenChannelRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static lightpay.lnd.grpc.OpenChannelRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(lightpay.lnd.grpc.OpenChannelRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code lnrpc.OpenChannelRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:lnrpc.OpenChannelRequest)
      lightpay.lnd.grpc.OpenChannelRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_OpenChannelRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_OpenChannelRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              lightpay.lnd.grpc.OpenChannelRequest.class, lightpay.lnd.grpc.OpenChannelRequest.Builder.class);
    }

    // Construct using lightpay.lnd.grpc.OpenChannelRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      nodePubkey_ = com.google.protobuf.ByteString.EMPTY;

      nodePubkeyString_ = "";

      localFundingAmount_ = 0L;

      pushSat_ = 0L;

      targetConf_ = 0;

      satPerByte_ = 0L;

      private_ = false;

      minHtlcMsat_ = 0L;

      remoteCsvDelay_ = 0;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_OpenChannelRequest_descriptor;
    }

    public lightpay.lnd.grpc.OpenChannelRequest getDefaultInstanceForType() {
      return lightpay.lnd.grpc.OpenChannelRequest.getDefaultInstance();
    }

    public lightpay.lnd.grpc.OpenChannelRequest build() {
      lightpay.lnd.grpc.OpenChannelRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public lightpay.lnd.grpc.OpenChannelRequest buildPartial() {
      lightpay.lnd.grpc.OpenChannelRequest result = new lightpay.lnd.grpc.OpenChannelRequest(this);
      result.nodePubkey_ = nodePubkey_;
      result.nodePubkeyString_ = nodePubkeyString_;
      result.localFundingAmount_ = localFundingAmount_;
      result.pushSat_ = pushSat_;
      result.targetConf_ = targetConf_;
      result.satPerByte_ = satPerByte_;
      result.private_ = private_;
      result.minHtlcMsat_ = minHtlcMsat_;
      result.remoteCsvDelay_ = remoteCsvDelay_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof lightpay.lnd.grpc.OpenChannelRequest) {
        return mergeFrom((lightpay.lnd.grpc.OpenChannelRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(lightpay.lnd.grpc.OpenChannelRequest other) {
      if (other == lightpay.lnd.grpc.OpenChannelRequest.getDefaultInstance()) return this;
      if (other.getNodePubkey() != com.google.protobuf.ByteString.EMPTY) {
        setNodePubkey(other.getNodePubkey());
      }
      if (!other.getNodePubkeyString().isEmpty()) {
        nodePubkeyString_ = other.nodePubkeyString_;
        onChanged();
      }
      if (other.getLocalFundingAmount() != 0L) {
        setLocalFundingAmount(other.getLocalFundingAmount());
      }
      if (other.getPushSat() != 0L) {
        setPushSat(other.getPushSat());
      }
      if (other.getTargetConf() != 0) {
        setTargetConf(other.getTargetConf());
      }
      if (other.getSatPerByte() != 0L) {
        setSatPerByte(other.getSatPerByte());
      }
      if (other.getPrivate() != false) {
        setPrivate(other.getPrivate());
      }
      if (other.getMinHtlcMsat() != 0L) {
        setMinHtlcMsat(other.getMinHtlcMsat());
      }
      if (other.getRemoteCsvDelay() != 0) {
        setRemoteCsvDelay(other.getRemoteCsvDelay());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      lightpay.lnd.grpc.OpenChannelRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (lightpay.lnd.grpc.OpenChannelRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.google.protobuf.ByteString nodePubkey_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     *&#47; The pubkey of the node to open a channel with
     * </pre>
     *
     * <code>bytes node_pubkey = 2[json_name = "node_pubkey"];</code>
     */
    public com.google.protobuf.ByteString getNodePubkey() {
      return nodePubkey_;
    }
    /**
     * <pre>
     *&#47; The pubkey of the node to open a channel with
     * </pre>
     *
     * <code>bytes node_pubkey = 2[json_name = "node_pubkey"];</code>
     */
    public Builder setNodePubkey(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      nodePubkey_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The pubkey of the node to open a channel with
     * </pre>
     *
     * <code>bytes node_pubkey = 2[json_name = "node_pubkey"];</code>
     */
    public Builder clearNodePubkey() {
      
      nodePubkey_ = getDefaultInstance().getNodePubkey();
      onChanged();
      return this;
    }

    private java.lang.Object nodePubkeyString_ = "";
    /**
     * <pre>
     *&#47; The hex encoded pubkey of the node to open a channel with
     * </pre>
     *
     * <code>string node_pubkey_string = 3[json_name = "node_pubkey_string"];</code>
     */
    public java.lang.String getNodePubkeyString() {
      java.lang.Object ref = nodePubkeyString_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        nodePubkeyString_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     *&#47; The hex encoded pubkey of the node to open a channel with
     * </pre>
     *
     * <code>string node_pubkey_string = 3[json_name = "node_pubkey_string"];</code>
     */
    public com.google.protobuf.ByteString
        getNodePubkeyStringBytes() {
      java.lang.Object ref = nodePubkeyString_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        nodePubkeyString_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *&#47; The hex encoded pubkey of the node to open a channel with
     * </pre>
     *
     * <code>string node_pubkey_string = 3[json_name = "node_pubkey_string"];</code>
     */
    public Builder setNodePubkeyString(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      nodePubkeyString_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The hex encoded pubkey of the node to open a channel with
     * </pre>
     *
     * <code>string node_pubkey_string = 3[json_name = "node_pubkey_string"];</code>
     */
    public Builder clearNodePubkeyString() {
      
      nodePubkeyString_ = getDefaultInstance().getNodePubkeyString();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The hex encoded pubkey of the node to open a channel with
     * </pre>
     *
     * <code>string node_pubkey_string = 3[json_name = "node_pubkey_string"];</code>
     */
    public Builder setNodePubkeyStringBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      nodePubkeyString_ = value;
      onChanged();
      return this;
    }

    private long localFundingAmount_ ;
    /**
     * <pre>
     *&#47; The number of satoshis the wallet should commit to the channel
     * </pre>
     *
     * <code>int64 local_funding_amount = 4[json_name = "local_funding_amount"];</code>
     */
    public long getLocalFundingAmount() {
      return localFundingAmount_;
    }
    /**
     * <pre>
     *&#47; The number of satoshis the wallet should commit to the channel
     * </pre>
     *
     * <code>int64 local_funding_amount = 4[json_name = "local_funding_amount"];</code>
     */
    public Builder setLocalFundingAmount(long value) {
      
      localFundingAmount_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The number of satoshis the wallet should commit to the channel
     * </pre>
     *
     * <code>int64 local_funding_amount = 4[json_name = "local_funding_amount"];</code>
     */
    public Builder clearLocalFundingAmount() {
      
      localFundingAmount_ = 0L;
      onChanged();
      return this;
    }

    private long pushSat_ ;
    /**
     * <pre>
     *&#47; The number of satoshis to push to the remote side as part of the initial commitment state
     * </pre>
     *
     * <code>int64 push_sat = 5[json_name = "push_sat"];</code>
     */
    public long getPushSat() {
      return pushSat_;
    }
    /**
     * <pre>
     *&#47; The number of satoshis to push to the remote side as part of the initial commitment state
     * </pre>
     *
     * <code>int64 push_sat = 5[json_name = "push_sat"];</code>
     */
    public Builder setPushSat(long value) {
      
      pushSat_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The number of satoshis to push to the remote side as part of the initial commitment state
     * </pre>
     *
     * <code>int64 push_sat = 5[json_name = "push_sat"];</code>
     */
    public Builder clearPushSat() {
      
      pushSat_ = 0L;
      onChanged();
      return this;
    }

    private int targetConf_ ;
    /**
     * <pre>
     *&#47; The target number of blocks that the funding transaction should be confirmed by.
     * </pre>
     *
     * <code>int32 target_conf = 6;</code>
     */
    public int getTargetConf() {
      return targetConf_;
    }
    /**
     * <pre>
     *&#47; The target number of blocks that the funding transaction should be confirmed by.
     * </pre>
     *
     * <code>int32 target_conf = 6;</code>
     */
    public Builder setTargetConf(int value) {
      
      targetConf_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The target number of blocks that the funding transaction should be confirmed by.
     * </pre>
     *
     * <code>int32 target_conf = 6;</code>
     */
    public Builder clearTargetConf() {
      
      targetConf_ = 0;
      onChanged();
      return this;
    }

    private long satPerByte_ ;
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
     * </pre>
     *
     * <code>int64 sat_per_byte = 7;</code>
     */
    public long getSatPerByte() {
      return satPerByte_;
    }
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
     * </pre>
     *
     * <code>int64 sat_per_byte = 7;</code>
     */
    public Builder setSatPerByte(long value) {
      
      satPerByte_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
     * </pre>
     *
     * <code>int64 sat_per_byte = 7;</code>
     */
    public Builder clearSatPerByte() {
      
      satPerByte_ = 0L;
      onChanged();
      return this;
    }

    private boolean private_ ;
    /**
     * <pre>
     *&#47; Whether this channel should be private, not announced to the greater network.
     * </pre>
     *
     * <code>bool private = 8[json_name = "private"];</code>
     */
    public boolean getPrivate() {
      return private_;
    }
    /**
     * <pre>
     *&#47; Whether this channel should be private, not announced to the greater network.
     * </pre>
     *
     * <code>bool private = 8[json_name = "private"];</code>
     */
    public Builder setPrivate(boolean value) {
      
      private_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; Whether this channel should be private, not announced to the greater network.
     * </pre>
     *
     * <code>bool private = 8[json_name = "private"];</code>
     */
    public Builder clearPrivate() {
      
      private_ = false;
      onChanged();
      return this;
    }

    private long minHtlcMsat_ ;
    /**
     * <pre>
     *&#47; The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
     * </pre>
     *
     * <code>int64 min_htlc_msat = 9[json_name = "min_htlc_msat"];</code>
     */
    public long getMinHtlcMsat() {
      return minHtlcMsat_;
    }
    /**
     * <pre>
     *&#47; The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
     * </pre>
     *
     * <code>int64 min_htlc_msat = 9[json_name = "min_htlc_msat"];</code>
     */
    public Builder setMinHtlcMsat(long value) {
      
      minHtlcMsat_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
     * </pre>
     *
     * <code>int64 min_htlc_msat = 9[json_name = "min_htlc_msat"];</code>
     */
    public Builder clearMinHtlcMsat() {
      
      minHtlcMsat_ = 0L;
      onChanged();
      return this;
    }

    private int remoteCsvDelay_ ;
    /**
     * <pre>
     *&#47; The delay we require on the remote's commitment transaction. If this is not set, it will be scaled automatically with the channel size.
     * </pre>
     *
     * <code>uint32 remote_csv_delay = 10[json_name = "remote_csv_delay"];</code>
     */
    public int getRemoteCsvDelay() {
      return remoteCsvDelay_;
    }
    /**
     * <pre>
     *&#47; The delay we require on the remote's commitment transaction. If this is not set, it will be scaled automatically with the channel size.
     * </pre>
     *
     * <code>uint32 remote_csv_delay = 10[json_name = "remote_csv_delay"];</code>
     */
    public Builder setRemoteCsvDelay(int value) {
      
      remoteCsvDelay_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The delay we require on the remote's commitment transaction. If this is not set, it will be scaled automatically with the channel size.
     * </pre>
     *
     * <code>uint32 remote_csv_delay = 10[json_name = "remote_csv_delay"];</code>
     */
    public Builder clearRemoteCsvDelay() {
      
      remoteCsvDelay_ = 0;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:lnrpc.OpenChannelRequest)
  }

  // @@protoc_insertion_point(class_scope:lnrpc.OpenChannelRequest)
  private static final lightpay.lnd.grpc.OpenChannelRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new lightpay.lnd.grpc.OpenChannelRequest();
  }

  public static lightpay.lnd.grpc.OpenChannelRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<OpenChannelRequest>
      PARSER = new com.google.protobuf.AbstractParser<OpenChannelRequest>() {
    public OpenChannelRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new OpenChannelRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<OpenChannelRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<OpenChannelRequest> getParserForType() {
    return PARSER;
  }

  public lightpay.lnd.grpc.OpenChannelRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

