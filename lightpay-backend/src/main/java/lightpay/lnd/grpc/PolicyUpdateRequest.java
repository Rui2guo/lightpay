// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

package lightpay.lnd.grpc;

/**
 * Protobuf type {@code lnrpc.PolicyUpdateRequest}
 */
public  final class PolicyUpdateRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:lnrpc.PolicyUpdateRequest)
    PolicyUpdateRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PolicyUpdateRequest.newBuilder() to construct.
  private PolicyUpdateRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PolicyUpdateRequest() {
    baseFeeMsat_ = 0L;
    feeRate_ = 0D;
    timeLockDelta_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private PolicyUpdateRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            scopeCase_ = 1;
            scope_ = input.readBool();
            break;
          }
          case 18: {
            lightpay.lnd.grpc.ChannelPoint.Builder subBuilder = null;
            if (scopeCase_ == 2) {
              subBuilder = ((lightpay.lnd.grpc.ChannelPoint) scope_).toBuilder();
            }
            scope_ =
                input.readMessage(lightpay.lnd.grpc.ChannelPoint.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((lightpay.lnd.grpc.ChannelPoint) scope_);
              scope_ = subBuilder.buildPartial();
            }
            scopeCase_ = 2;
            break;
          }
          case 24: {

            baseFeeMsat_ = input.readInt64();
            break;
          }
          case 33: {

            feeRate_ = input.readDouble();
            break;
          }
          case 40: {

            timeLockDelta_ = input.readUInt32();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_PolicyUpdateRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_PolicyUpdateRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            lightpay.lnd.grpc.PolicyUpdateRequest.class, lightpay.lnd.grpc.PolicyUpdateRequest.Builder.class);
  }

  private int scopeCase_ = 0;
  private java.lang.Object scope_;
  public enum ScopeCase
      implements com.google.protobuf.Internal.EnumLite {
    GLOBAL(1),
    CHAN_POINT(2),
    SCOPE_NOT_SET(0);
    private final int value;
    private ScopeCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ScopeCase valueOf(int value) {
      return forNumber(value);
    }

    public static ScopeCase forNumber(int value) {
      switch (value) {
        case 1: return GLOBAL;
        case 2: return CHAN_POINT;
        case 0: return SCOPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ScopeCase
  getScopeCase() {
    return ScopeCase.forNumber(
        scopeCase_);
  }

  public static final int GLOBAL_FIELD_NUMBER = 1;
  /**
   * <pre>
   *&#47; If set, then this update applies to all currently active channels.
   * </pre>
   *
   * <code>bool global = 1[json_name = "global"];</code>
   */
  public boolean getGlobal() {
    if (scopeCase_ == 1) {
      return (java.lang.Boolean) scope_;
    }
    return false;
  }

  public static final int CHAN_POINT_FIELD_NUMBER = 2;
  /**
   * <pre>
   *&#47; If set, this update will target a specific channel.
   * </pre>
   *
   * <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
   */
  public boolean hasChanPoint() {
    return scopeCase_ == 2;
  }
  /**
   * <pre>
   *&#47; If set, this update will target a specific channel.
   * </pre>
   *
   * <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
   */
  public lightpay.lnd.grpc.ChannelPoint getChanPoint() {
    if (scopeCase_ == 2) {
       return (lightpay.lnd.grpc.ChannelPoint) scope_;
    }
    return lightpay.lnd.grpc.ChannelPoint.getDefaultInstance();
  }
  /**
   * <pre>
   *&#47; If set, this update will target a specific channel.
   * </pre>
   *
   * <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
   */
  public lightpay.lnd.grpc.ChannelPointOrBuilder getChanPointOrBuilder() {
    if (scopeCase_ == 2) {
       return (lightpay.lnd.grpc.ChannelPoint) scope_;
    }
    return lightpay.lnd.grpc.ChannelPoint.getDefaultInstance();
  }

  public static final int BASE_FEE_MSAT_FIELD_NUMBER = 3;
  private long baseFeeMsat_;
  /**
   * <pre>
   *&#47; The base fee charged regardless of the number of milli-satoshis sent.
   * </pre>
   *
   * <code>int64 base_fee_msat = 3[json_name = "base_fee_msat"];</code>
   */
  public long getBaseFeeMsat() {
    return baseFeeMsat_;
  }

  public static final int FEE_RATE_FIELD_NUMBER = 4;
  private double feeRate_;
  /**
   * <pre>
   *&#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
   * </pre>
   *
   * <code>double fee_rate = 4[json_name = "fee_rate"];</code>
   */
  public double getFeeRate() {
    return feeRate_;
  }

  public static final int TIME_LOCK_DELTA_FIELD_NUMBER = 5;
  private int timeLockDelta_;
  /**
   * <pre>
   *&#47; The required timelock delta for HTLCs forwarded over the channel.
   * </pre>
   *
   * <code>uint32 time_lock_delta = 5[json_name = "time_lock_delta"];</code>
   */
  public int getTimeLockDelta() {
    return timeLockDelta_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (scopeCase_ == 1) {
      output.writeBool(
          1, (boolean)((java.lang.Boolean) scope_));
    }
    if (scopeCase_ == 2) {
      output.writeMessage(2, (lightpay.lnd.grpc.ChannelPoint) scope_);
    }
    if (baseFeeMsat_ != 0L) {
      output.writeInt64(3, baseFeeMsat_);
    }
    if (feeRate_ != 0D) {
      output.writeDouble(4, feeRate_);
    }
    if (timeLockDelta_ != 0) {
      output.writeUInt32(5, timeLockDelta_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (scopeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(
            1, (boolean)((java.lang.Boolean) scope_));
    }
    if (scopeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (lightpay.lnd.grpc.ChannelPoint) scope_);
    }
    if (baseFeeMsat_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(3, baseFeeMsat_);
    }
    if (feeRate_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(4, feeRate_);
    }
    if (timeLockDelta_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(5, timeLockDelta_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof lightpay.lnd.grpc.PolicyUpdateRequest)) {
      return super.equals(obj);
    }
    lightpay.lnd.grpc.PolicyUpdateRequest other = (lightpay.lnd.grpc.PolicyUpdateRequest) obj;

    boolean result = true;
    result = result && (getBaseFeeMsat()
        == other.getBaseFeeMsat());
    result = result && (
        java.lang.Double.doubleToLongBits(getFeeRate())
        == java.lang.Double.doubleToLongBits(
            other.getFeeRate()));
    result = result && (getTimeLockDelta()
        == other.getTimeLockDelta());
    result = result && getScopeCase().equals(
        other.getScopeCase());
    if (!result) return false;
    switch (scopeCase_) {
      case 1:
        result = result && (getGlobal()
            == other.getGlobal());
        break;
      case 2:
        result = result && getChanPoint()
            .equals(other.getChanPoint());
        break;
      case 0:
      default:
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + BASE_FEE_MSAT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getBaseFeeMsat());
    hash = (37 * hash) + FEE_RATE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getFeeRate()));
    hash = (37 * hash) + TIME_LOCK_DELTA_FIELD_NUMBER;
    hash = (53 * hash) + getTimeLockDelta();
    switch (scopeCase_) {
      case 1:
        hash = (37 * hash) + GLOBAL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getGlobal());
        break;
      case 2:
        hash = (37 * hash) + CHAN_POINT_FIELD_NUMBER;
        hash = (53 * hash) + getChanPoint().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static lightpay.lnd.grpc.PolicyUpdateRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static lightpay.lnd.grpc.PolicyUpdateRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static lightpay.lnd.grpc.PolicyUpdateRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static lightpay.lnd.grpc.PolicyUpdateRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static lightpay.lnd.grpc.PolicyUpdateRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static lightpay.lnd.grpc.PolicyUpdateRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static lightpay.lnd.grpc.PolicyUpdateRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static lightpay.lnd.grpc.PolicyUpdateRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static lightpay.lnd.grpc.PolicyUpdateRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static lightpay.lnd.grpc.PolicyUpdateRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static lightpay.lnd.grpc.PolicyUpdateRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static lightpay.lnd.grpc.PolicyUpdateRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(lightpay.lnd.grpc.PolicyUpdateRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code lnrpc.PolicyUpdateRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:lnrpc.PolicyUpdateRequest)
      lightpay.lnd.grpc.PolicyUpdateRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_PolicyUpdateRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_PolicyUpdateRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              lightpay.lnd.grpc.PolicyUpdateRequest.class, lightpay.lnd.grpc.PolicyUpdateRequest.Builder.class);
    }

    // Construct using lightpay.lnd.grpc.PolicyUpdateRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      baseFeeMsat_ = 0L;

      feeRate_ = 0D;

      timeLockDelta_ = 0;

      scopeCase_ = 0;
      scope_ = null;
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return lightpay.lnd.grpc.Rpc.internal_static_lnrpc_PolicyUpdateRequest_descriptor;
    }

    public lightpay.lnd.grpc.PolicyUpdateRequest getDefaultInstanceForType() {
      return lightpay.lnd.grpc.PolicyUpdateRequest.getDefaultInstance();
    }

    public lightpay.lnd.grpc.PolicyUpdateRequest build() {
      lightpay.lnd.grpc.PolicyUpdateRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public lightpay.lnd.grpc.PolicyUpdateRequest buildPartial() {
      lightpay.lnd.grpc.PolicyUpdateRequest result = new lightpay.lnd.grpc.PolicyUpdateRequest(this);
      if (scopeCase_ == 1) {
        result.scope_ = scope_;
      }
      if (scopeCase_ == 2) {
        if (chanPointBuilder_ == null) {
          result.scope_ = scope_;
        } else {
          result.scope_ = chanPointBuilder_.build();
        }
      }
      result.baseFeeMsat_ = baseFeeMsat_;
      result.feeRate_ = feeRate_;
      result.timeLockDelta_ = timeLockDelta_;
      result.scopeCase_ = scopeCase_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof lightpay.lnd.grpc.PolicyUpdateRequest) {
        return mergeFrom((lightpay.lnd.grpc.PolicyUpdateRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(lightpay.lnd.grpc.PolicyUpdateRequest other) {
      if (other == lightpay.lnd.grpc.PolicyUpdateRequest.getDefaultInstance()) return this;
      if (other.getBaseFeeMsat() != 0L) {
        setBaseFeeMsat(other.getBaseFeeMsat());
      }
      if (other.getFeeRate() != 0D) {
        setFeeRate(other.getFeeRate());
      }
      if (other.getTimeLockDelta() != 0) {
        setTimeLockDelta(other.getTimeLockDelta());
      }
      switch (other.getScopeCase()) {
        case GLOBAL: {
          setGlobal(other.getGlobal());
          break;
        }
        case CHAN_POINT: {
          mergeChanPoint(other.getChanPoint());
          break;
        }
        case SCOPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      lightpay.lnd.grpc.PolicyUpdateRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (lightpay.lnd.grpc.PolicyUpdateRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int scopeCase_ = 0;
    private java.lang.Object scope_;
    public ScopeCase
        getScopeCase() {
      return ScopeCase.forNumber(
          scopeCase_);
    }

    public Builder clearScope() {
      scopeCase_ = 0;
      scope_ = null;
      onChanged();
      return this;
    }


    /**
     * <pre>
     *&#47; If set, then this update applies to all currently active channels.
     * </pre>
     *
     * <code>bool global = 1[json_name = "global"];</code>
     */
    public boolean getGlobal() {
      if (scopeCase_ == 1) {
        return (java.lang.Boolean) scope_;
      }
      return false;
    }
    /**
     * <pre>
     *&#47; If set, then this update applies to all currently active channels.
     * </pre>
     *
     * <code>bool global = 1[json_name = "global"];</code>
     */
    public Builder setGlobal(boolean value) {
      scopeCase_ = 1;
      scope_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; If set, then this update applies to all currently active channels.
     * </pre>
     *
     * <code>bool global = 1[json_name = "global"];</code>
     */
    public Builder clearGlobal() {
      if (scopeCase_ == 1) {
        scopeCase_ = 0;
        scope_ = null;
        onChanged();
      }
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        lightpay.lnd.grpc.ChannelPoint, lightpay.lnd.grpc.ChannelPoint.Builder, lightpay.lnd.grpc.ChannelPointOrBuilder> chanPointBuilder_;
    /**
     * <pre>
     *&#47; If set, this update will target a specific channel.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
     */
    public boolean hasChanPoint() {
      return scopeCase_ == 2;
    }
    /**
     * <pre>
     *&#47; If set, this update will target a specific channel.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
     */
    public lightpay.lnd.grpc.ChannelPoint getChanPoint() {
      if (chanPointBuilder_ == null) {
        if (scopeCase_ == 2) {
          return (lightpay.lnd.grpc.ChannelPoint) scope_;
        }
        return lightpay.lnd.grpc.ChannelPoint.getDefaultInstance();
      } else {
        if (scopeCase_ == 2) {
          return chanPointBuilder_.getMessage();
        }
        return lightpay.lnd.grpc.ChannelPoint.getDefaultInstance();
      }
    }
    /**
     * <pre>
     *&#47; If set, this update will target a specific channel.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
     */
    public Builder setChanPoint(lightpay.lnd.grpc.ChannelPoint value) {
      if (chanPointBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        scope_ = value;
        onChanged();
      } else {
        chanPointBuilder_.setMessage(value);
      }
      scopeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     *&#47; If set, this update will target a specific channel.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
     */
    public Builder setChanPoint(
        lightpay.lnd.grpc.ChannelPoint.Builder builderForValue) {
      if (chanPointBuilder_ == null) {
        scope_ = builderForValue.build();
        onChanged();
      } else {
        chanPointBuilder_.setMessage(builderForValue.build());
      }
      scopeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     *&#47; If set, this update will target a specific channel.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
     */
    public Builder mergeChanPoint(lightpay.lnd.grpc.ChannelPoint value) {
      if (chanPointBuilder_ == null) {
        if (scopeCase_ == 2 &&
            scope_ != lightpay.lnd.grpc.ChannelPoint.getDefaultInstance()) {
          scope_ = lightpay.lnd.grpc.ChannelPoint.newBuilder((lightpay.lnd.grpc.ChannelPoint) scope_)
              .mergeFrom(value).buildPartial();
        } else {
          scope_ = value;
        }
        onChanged();
      } else {
        if (scopeCase_ == 2) {
          chanPointBuilder_.mergeFrom(value);
        }
        chanPointBuilder_.setMessage(value);
      }
      scopeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     *&#47; If set, this update will target a specific channel.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
     */
    public Builder clearChanPoint() {
      if (chanPointBuilder_ == null) {
        if (scopeCase_ == 2) {
          scopeCase_ = 0;
          scope_ = null;
          onChanged();
        }
      } else {
        if (scopeCase_ == 2) {
          scopeCase_ = 0;
          scope_ = null;
        }
        chanPointBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     *&#47; If set, this update will target a specific channel.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
     */
    public lightpay.lnd.grpc.ChannelPoint.Builder getChanPointBuilder() {
      return getChanPointFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     *&#47; If set, this update will target a specific channel.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
     */
    public lightpay.lnd.grpc.ChannelPointOrBuilder getChanPointOrBuilder() {
      if ((scopeCase_ == 2) && (chanPointBuilder_ != null)) {
        return chanPointBuilder_.getMessageOrBuilder();
      } else {
        if (scopeCase_ == 2) {
          return (lightpay.lnd.grpc.ChannelPoint) scope_;
        }
        return lightpay.lnd.grpc.ChannelPoint.getDefaultInstance();
      }
    }
    /**
     * <pre>
     *&#47; If set, this update will target a specific channel.
     * </pre>
     *
     * <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        lightpay.lnd.grpc.ChannelPoint, lightpay.lnd.grpc.ChannelPoint.Builder, lightpay.lnd.grpc.ChannelPointOrBuilder> 
        getChanPointFieldBuilder() {
      if (chanPointBuilder_ == null) {
        if (!(scopeCase_ == 2)) {
          scope_ = lightpay.lnd.grpc.ChannelPoint.getDefaultInstance();
        }
        chanPointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            lightpay.lnd.grpc.ChannelPoint, lightpay.lnd.grpc.ChannelPoint.Builder, lightpay.lnd.grpc.ChannelPointOrBuilder>(
                (lightpay.lnd.grpc.ChannelPoint) scope_,
                getParentForChildren(),
                isClean());
        scope_ = null;
      }
      scopeCase_ = 2;
      onChanged();;
      return chanPointBuilder_;
    }

    private long baseFeeMsat_ ;
    /**
     * <pre>
     *&#47; The base fee charged regardless of the number of milli-satoshis sent.
     * </pre>
     *
     * <code>int64 base_fee_msat = 3[json_name = "base_fee_msat"];</code>
     */
    public long getBaseFeeMsat() {
      return baseFeeMsat_;
    }
    /**
     * <pre>
     *&#47; The base fee charged regardless of the number of milli-satoshis sent.
     * </pre>
     *
     * <code>int64 base_fee_msat = 3[json_name = "base_fee_msat"];</code>
     */
    public Builder setBaseFeeMsat(long value) {
      
      baseFeeMsat_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The base fee charged regardless of the number of milli-satoshis sent.
     * </pre>
     *
     * <code>int64 base_fee_msat = 3[json_name = "base_fee_msat"];</code>
     */
    public Builder clearBaseFeeMsat() {
      
      baseFeeMsat_ = 0L;
      onChanged();
      return this;
    }

    private double feeRate_ ;
    /**
     * <pre>
     *&#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
     * </pre>
     *
     * <code>double fee_rate = 4[json_name = "fee_rate"];</code>
     */
    public double getFeeRate() {
      return feeRate_;
    }
    /**
     * <pre>
     *&#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
     * </pre>
     *
     * <code>double fee_rate = 4[json_name = "fee_rate"];</code>
     */
    public Builder setFeeRate(double value) {
      
      feeRate_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
     * </pre>
     *
     * <code>double fee_rate = 4[json_name = "fee_rate"];</code>
     */
    public Builder clearFeeRate() {
      
      feeRate_ = 0D;
      onChanged();
      return this;
    }

    private int timeLockDelta_ ;
    /**
     * <pre>
     *&#47; The required timelock delta for HTLCs forwarded over the channel.
     * </pre>
     *
     * <code>uint32 time_lock_delta = 5[json_name = "time_lock_delta"];</code>
     */
    public int getTimeLockDelta() {
      return timeLockDelta_;
    }
    /**
     * <pre>
     *&#47; The required timelock delta for HTLCs forwarded over the channel.
     * </pre>
     *
     * <code>uint32 time_lock_delta = 5[json_name = "time_lock_delta"];</code>
     */
    public Builder setTimeLockDelta(int value) {
      
      timeLockDelta_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *&#47; The required timelock delta for HTLCs forwarded over the channel.
     * </pre>
     *
     * <code>uint32 time_lock_delta = 5[json_name = "time_lock_delta"];</code>
     */
    public Builder clearTimeLockDelta() {
      
      timeLockDelta_ = 0;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:lnrpc.PolicyUpdateRequest)
  }

  // @@protoc_insertion_point(class_scope:lnrpc.PolicyUpdateRequest)
  private static final lightpay.lnd.grpc.PolicyUpdateRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new lightpay.lnd.grpc.PolicyUpdateRequest();
  }

  public static lightpay.lnd.grpc.PolicyUpdateRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PolicyUpdateRequest>
      PARSER = new com.google.protobuf.AbstractParser<PolicyUpdateRequest>() {
    public PolicyUpdateRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new PolicyUpdateRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<PolicyUpdateRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PolicyUpdateRequest> getParserForType() {
    return PARSER;
  }

  public lightpay.lnd.grpc.PolicyUpdateRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

