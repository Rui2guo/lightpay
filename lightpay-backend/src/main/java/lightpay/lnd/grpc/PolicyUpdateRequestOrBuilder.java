// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

package lightpay.lnd.grpc;

public interface PolicyUpdateRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:lnrpc.PolicyUpdateRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   *&#47; If set, then this update applies to all currently active channels.
   * </pre>
   *
   * <code>bool global = 1[json_name = "global"];</code>
   */
  boolean getGlobal();

  /**
   * <pre>
   *&#47; If set, this update will target a specific channel.
   * </pre>
   *
   * <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
   */
  boolean hasChanPoint();
  /**
   * <pre>
   *&#47; If set, this update will target a specific channel.
   * </pre>
   *
   * <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
   */
  lightpay.lnd.grpc.ChannelPoint getChanPoint();
  /**
   * <pre>
   *&#47; If set, this update will target a specific channel.
   * </pre>
   *
   * <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
   */
  lightpay.lnd.grpc.ChannelPointOrBuilder getChanPointOrBuilder();

  /**
   * <pre>
   *&#47; The base fee charged regardless of the number of milli-satoshis sent.
   * </pre>
   *
   * <code>int64 base_fee_msat = 3[json_name = "base_fee_msat"];</code>
   */
  long getBaseFeeMsat();

  /**
   * <pre>
   *&#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
   * </pre>
   *
   * <code>double fee_rate = 4[json_name = "fee_rate"];</code>
   */
  double getFeeRate();

  /**
   * <pre>
   *&#47; The required timelock delta for HTLCs forwarded over the channel.
   * </pre>
   *
   * <code>uint32 time_lock_delta = 5[json_name = "time_lock_delta"];</code>
   */
  int getTimeLockDelta();

  public lightpay.lnd.grpc.PolicyUpdateRequest.ScopeCase getScopeCase();
}
